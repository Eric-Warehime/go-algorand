// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
