// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
