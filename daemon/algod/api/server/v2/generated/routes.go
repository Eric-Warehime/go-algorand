// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
