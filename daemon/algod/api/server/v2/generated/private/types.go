// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

const (
	Api_keyScopes = "api_key.Scopes"
)

// AccountParticipation describes the parameters used by this account in consensus protocol.
type AccountParticipation struct {
	// \[sel\] Selection public key (if any) currently registered for this round.
	SelectionParticipationKey []byte `json:"selection-participation-key"`

	// \[stprf\] Root of the state proof key (if any)
	StateProofKey *[]byte `json:"state-proof-key,omitempty"`

	// \[voteFst\] First round for which this participation is valid.
	VoteFirstValid uint64 `json:"vote-first-valid"`

	// \[voteKD\] Number of subkeys in each batch of participation keys.
	VoteKeyDilution uint64 `json:"vote-key-dilution"`

	// \[voteLst\] Last round for which this participation is valid.
	VoteLastValid uint64 `json:"vote-last-valid"`

	// \[vote\] root participation public key (if any) currently registered for this round.
	VoteParticipationKey []byte `json:"vote-participation-key"`
}

// Application state delta.
type AccountStateDelta struct {
	Address string `json:"address"`

	// Application state delta.
	Delta StateDelta `json:"delta"`
}

// An error response with optional data field.
type ErrorResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message string                  `json:"message"`
}

// Represents a TEAL value delta.
type EvalDelta struct {
	// \[at\] delta action.
	Action uint64 `json:"action"`

	// \[bs\] bytes value.
	Bytes *string `json:"bytes,omitempty"`

	// \[ui\] uint value.
	Uint *uint64 `json:"uint,omitempty"`
}

// Key-value pairs for StateDelta.
type EvalDeltaKeyValue struct {
	Key string `json:"key"`

	// Represents a TEAL value delta.
	Value EvalDelta `json:"value"`
}

// Represents a participation key used by the node.
type ParticipationKey struct {
	// Address the key was generated for.
	Address string `json:"address"`

	// When registered, this is the first round it may be used.
	EffectiveFirstValid *uint64 `json:"effective-first-valid,omitempty"`

	// When registered, this is the last round it may be used.
	EffectiveLastValid *uint64 `json:"effective-last-valid,omitempty"`

	// The key's ParticipationID.
	Id string `json:"id"`

	// AccountParticipation describes the parameters used by this account in consensus protocol.
	Key AccountParticipation `json:"key"`

	// Round when this key was last used to propose a block.
	LastBlockProposal *uint64 `json:"last-block-proposal,omitempty"`

	// Round when this key was last used to generate a state proof.
	LastStateProof *uint64 `json:"last-state-proof,omitempty"`

	// Round when this key was last used to vote.
	LastVote *uint64 `json:"last-vote,omitempty"`
}

// Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
type PendingTransactionResponse struct {
	// The application index if the transaction was found and it created an application.
	ApplicationIndex *uint64 `json:"application-index,omitempty"`

	// The number of the asset's unit that were transferred to the close-to address.
	AssetClosingAmount *uint64 `json:"asset-closing-amount,omitempty"`

	// The asset index if the transaction was found and it created an asset.
	AssetIndex *uint64 `json:"asset-index,omitempty"`

	// Rewards in microalgos applied to the close remainder to account.
	CloseRewards *uint64 `json:"close-rewards,omitempty"`

	// Closing amount for the transaction.
	ClosingAmount *uint64 `json:"closing-amount,omitempty"`

	// The round where this transaction was confirmed, if present.
	ConfirmedRound *uint64 `json:"confirmed-round,omitempty"`

	// Application state delta.
	GlobalStateDelta *StateDelta `json:"global-state-delta,omitempty"`

	// Inner transactions produced by application execution.
	InnerTxns *[]PendingTransactionResponse `json:"inner-txns,omitempty"`

	// \[ld\] Local state key/value changes for the application being executed by this transaction.
	LocalStateDelta *[]AccountStateDelta `json:"local-state-delta,omitempty"`

	// \[lg\] Logs for the application being executed by this transaction.
	Logs *[][]byte `json:"logs,omitempty"`

	// Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
	PoolError string `json:"pool-error"`

	// Rewards in microalgos applied to the receiver account.
	ReceiverRewards *uint64 `json:"receiver-rewards,omitempty"`

	// Rewards in microalgos applied to the sender account.
	SenderRewards *uint64 `json:"sender-rewards,omitempty"`

	// The raw signed transaction.
	Txn map[string]interface{} `json:"txn"`
}

<<<<<<< Updated upstream
// StateDelta defines model for StateDelta.
type StateDelta []EvalDeltaKeyValue

// StateProof defines model for StateProof.
type StateProof struct {

	// Represents the message that the state proofs are attesting to.
	Message StateProofMessage `json:"Message"`

	// The encoded StateProof for the message.
	StateProof []byte `json:"StateProof"`
}

// StateProofMessage defines model for StateProofMessage.
type StateProofMessage struct {

	// The vector commitment root on all light block headers within a state proof interval.
	BlockHeadersCommitment []byte `json:"BlockHeadersCommitment"`

	// The first round the message attests to.
	FirstAttestedRound uint64 `json:"FirstAttestedRound"`

	// The last round the message attests to.
	LastAttestedRound uint64 `json:"LastAttestedRound"`

	// An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.
	LnProvenWeight uint64 `json:"LnProvenWeight"`

	// The vector commitment root of the top N accounts to sign the next StateProof.
	VotersCommitment []byte `json:"VotersCommitment"`
}

// TealKeyValue defines model for TealKeyValue.
type TealKeyValue struct {
	Key string `json:"key"`

	// Represents a TEAL value.
	Value TealValue `json:"value"`
}

// TealKeyValueStore defines model for TealKeyValueStore.
type TealKeyValueStore []TealKeyValue

// TealValue defines model for TealValue.
type TealValue struct {

	// \[tb\] bytes value.
	Bytes string `json:"bytes"`

	// \[tt\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**
	Type uint64 `json:"type"`

	// \[ui\] uint value.
	Uint uint64 `json:"uint"`
}

// Version defines model for Version.
type Version struct {
	Build          BuildVersion `json:"build"`
	GenesisHashB64 []byte       `json:"genesis_hash_b64"`
	GenesisId      string       `json:"genesis_id"`
	Versions       []string     `json:"versions"`
}

// AccountId defines model for account-id.
type AccountId string

// Address defines model for address.
type Address string

// AddressRole defines model for address-role.
type AddressRole string

// AfterTime defines model for after-time.
type AfterTime time.Time

// AssetId defines model for asset-id.
type AssetId uint64

// BeforeTime defines model for before-time.
type BeforeTime time.Time

// Catchpoint defines model for catchpoint.
type Catchpoint string

// CurrencyGreaterThan defines model for currency-greater-than.
type CurrencyGreaterThan uint64

// CurrencyLessThan defines model for currency-less-than.
type CurrencyLessThan uint64

// ExcludeCloseTo defines model for exclude-close-to.
type ExcludeCloseTo bool

// Format defines model for format.
type Format string

// Limit defines model for limit.
type Limit uint64

// Max defines model for max.
type Max uint64

// MaxRound defines model for max-round.
type MaxRound uint64

// MinRound defines model for min-round.
type MinRound uint64

// Next defines model for next.
type Next string

// NotePrefix defines model for note-prefix.
type NotePrefix string

// Round defines model for round.
type Round uint64

// RoundNumber defines model for round-number.
type RoundNumber uint64

// SigType defines model for sig-type.
type SigType string

// TxId defines model for tx-id.
type TxId string

// TxType defines model for tx-type.
type TxType string

// AccountApplicationResponse defines model for AccountApplicationResponse.
type AccountApplicationResponse struct {

	// Stores local state associated with an application.
	AppLocalState *ApplicationLocalState `json:"app-local-state,omitempty"`

	// Stores the global information associated with an application.
	CreatedApp *ApplicationParams `json:"created-app,omitempty"`

	// The round for which this information is relevant.
	Round uint64 `json:"round"`
}

// AccountAssetResponse defines model for AccountAssetResponse.
type AccountAssetResponse struct {

	// Describes an asset held by an account.
	//
	// Definition:
	// data/basics/userBalance.go : AssetHolding
	AssetHolding *AssetHolding `json:"asset-holding,omitempty"`

	// AssetParams specifies the parameters for an asset.
	//
	// \[apar\] when part of an AssetConfig transaction.
	//
	// Definition:
	// data/transactions/asset.go : AssetParams
	CreatedAsset *AssetParams `json:"created-asset,omitempty"`

	// The round for which this information is relevant.
	Round uint64 `json:"round"`
}

// AccountResponse defines model for AccountResponse.
type AccountResponse Account

// ApplicationResponse defines model for ApplicationResponse.
type ApplicationResponse Application

// AssetResponse defines model for AssetResponse.
type AssetResponse Asset

// BlockHashResponse defines model for BlockHashResponse.
type BlockHashResponse struct {

	// Block header hash.
	BlockHash string `json:"blockHash"`
}

// BlockResponse defines model for BlockResponse.
type BlockResponse struct {

	// Block header data.
	Block map[string]interface{} `json:"block"`

	// Optional certificate object. This is only included when the format is set to message pack.
	Cert *map[string]interface{} `json:"cert,omitempty"`
}

// CatchpointAbortResponse defines model for CatchpointAbortResponse.
type CatchpointAbortResponse struct {

	// Catchup abort response string
	CatchupMessage string `json:"catchup-message"`
}

// CatchpointStartResponse defines model for CatchpointStartResponse.
type CatchpointStartResponse struct {

	// Catchup start response string
	CatchupMessage string `json:"catchup-message"`
}

// CompileResponse defines model for CompileResponse.
type CompileResponse struct {

	// base32 SHA512_256 of program bytes (Address style)
	Hash string `json:"hash"`

	// base64 encoded program bytes
	Result string `json:"result"`

	// JSON of the source map
	Sourcemap *map[string]interface{} `json:"sourcemap,omitempty"`
}

// DisassembleResponse defines model for DisassembleResponse.
type DisassembleResponse struct {

	// disassembled Teal code
	Result string `json:"result"`
}

// DryrunResponse defines model for DryrunResponse.
type DryrunResponse struct {
	Error string `json:"error"`

	// Protocol version is the protocol version Dryrun was operated under.
	ProtocolVersion string            `json:"protocol-version"`
	Txns            []DryrunTxnResult `json:"txns"`
}

// LightBlockHeaderProofResponse defines model for LightBlockHeaderProofResponse.
type LightBlockHeaderProofResponse LightBlockHeaderProof

// NodeStatusResponse defines model for NodeStatusResponse.
type NodeStatusResponse struct {

	// The current catchpoint that is being caught up to
	Catchpoint *string `json:"catchpoint,omitempty"`

	// The number of blocks that have already been obtained by the node as part of the catchup
	CatchpointAcquiredBlocks *uint64 `json:"catchpoint-acquired-blocks,omitempty"`

	// The number of accounts from the current catchpoint that have been processed so far as part of the catchup
	CatchpointProcessedAccounts *uint64 `json:"catchpoint-processed-accounts,omitempty"`

	// The total number of accounts included in the current catchpoint
	CatchpointTotalAccounts *uint64 `json:"catchpoint-total-accounts,omitempty"`

	// The total number of blocks that are required to complete the current catchpoint catchup
	CatchpointTotalBlocks *uint64 `json:"catchpoint-total-blocks,omitempty"`

	// The number of accounts from the current catchpoint that have been verified so far as part of the catchup
	CatchpointVerifiedAccounts *uint64 `json:"catchpoint-verified-accounts,omitempty"`

	// CatchupTime in nanoseconds
	CatchupTime uint64 `json:"catchup-time"`

	// The last catchpoint seen by the node
	LastCatchpoint *string `json:"last-catchpoint,omitempty"`

	// LastRound indicates the last round seen
	LastRound uint64 `json:"last-round"`

	// LastVersion indicates the last consensus version supported
	LastVersion string `json:"last-version"`

	// NextVersion of consensus protocol to use
	NextVersion string `json:"next-version"`

	// NextVersionRound is the round at which the next consensus version will apply
	NextVersionRound uint64 `json:"next-version-round"`

	// NextVersionSupported indicates whether the next consensus version is supported by this node
	NextVersionSupported bool `json:"next-version-supported"`

	// StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
	StoppedAtUnsupportedRound bool `json:"stopped-at-unsupported-round"`

	// TimeSinceLastRound in nanoseconds
	TimeSinceLastRound uint64 `json:"time-since-last-round"`
}

// ParticipationKeyResponse defines model for ParticipationKeyResponse.
type ParticipationKeyResponse ParticipationKey

// ParticipationKeysResponse defines model for ParticipationKeysResponse.
type ParticipationKeysResponse []ParticipationKey

// PendingTransactionsResponse defines model for PendingTransactionsResponse.
type PendingTransactionsResponse struct {

	// An array of signed transaction objects.
	TopTransactions []map[string]interface{} `json:"top-transactions"`

	// Total number of transactions in the pool.
	TotalTransactions uint64 `json:"total-transactions"`
}

// PostParticipationResponse defines model for PostParticipationResponse.
type PostParticipationResponse struct {

	// encoding of the participation ID.
	PartId string `json:"partId"`
}

// PostTransactionsResponse defines model for PostTransactionsResponse.
type PostTransactionsResponse struct {

	// encoding of the transaction hash.
	TxId string `json:"txId"`
}

// StateProofResponse defines model for StateProofResponse.
type StateProofResponse StateProof

// SupplyResponse defines model for SupplyResponse.
type SupplyResponse struct {

	// Round
	CurrentRound uint64 `json:"current_round"`

	// OnlineMoney
	OnlineMoney uint64 `json:"online-money"`

	// TotalMoney
	TotalMoney uint64 `json:"total-money"`
}

// TransactionParametersResponse defines model for TransactionParametersResponse.
type TransactionParametersResponse struct {

	// ConsensusVersion indicates the consensus protocol version
	// as of LastRound.
	ConsensusVersion string `json:"consensus-version"`

	// Fee is the suggested transaction fee
	// Fee is in units of micro-Algos per byte.
	// Fee may fall to zero but transactions must still have a fee of
	// at least MinTxnFee for the current network protocol.
	Fee uint64 `json:"fee"`

	// GenesisHash is the hash of the genesis block.
	GenesisHash []byte `json:"genesis-hash"`

	// GenesisID is an ID listed in the genesis block.
	GenesisId string `json:"genesis-id"`

	// LastRound indicates the last round seen
	LastRound uint64 `json:"last-round"`

	// The minimum transaction fee (not per byte) required for the
	// txn to validate for the current network protocol.
	MinFee uint64 `json:"min-fee"`
}

// TransactionProofResponse defines model for TransactionProofResponse.
type TransactionProofResponse struct {

	// The type of hash function used to create the proof, must be one of:
	// * sha512_256
	// * sha256
	Hashtype string `json:"hashtype"`

	// Index of the transaction in the block's payset.
	Idx uint64 `json:"idx"`

	// Proof of transaction membership.
	Proof []byte `json:"proof"`

	// Hash of SignedTxnInBlock for verifying proof.
	Stibhash []byte `json:"stibhash"`

	// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
	Treedepth uint64 `json:"treedepth"`
}

// VersionsResponse defines model for VersionsResponse.
type VersionsResponse Version
=======
// Application state delta.
type StateDelta = []EvalDeltaKeyValue
>>>>>>> Stashed changes

// ShutdownNodeParams defines parameters for ShutdownNode.
type ShutdownNodeParams struct {
	Timeout *uint64 `form:"timeout,omitempty" json:"timeout,omitempty"`
}
