// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9X8DAAD//046r/+WwwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
