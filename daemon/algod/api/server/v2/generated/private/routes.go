// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.DELETE("/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET("/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST("/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3PcuLUg/lVQnVvlsX/Nbvk1iVWVuj+N7XG08TguS5PsXts7gyZPdyMiAQ4ASurx",
	"6rtv4QAgQRJkU49o7mT9l60mHgcHBwfnjS+zVBSl4MC1mh1+mZVU0gI0SPyLpqmouE5YZv7KQKWSlZoJ",
	"Pjv034jSkvHNbD5j5teS6u1sPuO0gKaN6T+fSfilYhKy2aGWFcxnKt1CQc3Aelea1vVIl8lGJG6IIzvE",
	"8avZ1cgHmmUSlOpD+Tee7wjjaV5lQLSkXNHUfFLkgukt0VumiOtMGCeCAxFroretxmTNIM/Uwi/ylwrk",
	"Llilm3x4SVcNiIkUOfThfCmKFePgoYIaqHpDiBYkgzU22lJNzAwGVt9QC6KAynRL1kLuAdUCEcILvCpm",
	"hx9nCngGEncrBXaO/11LgF8h0VRuQM8+z2OLW2uQiWZFZGnHDvsSVJVrRbAtrnHDzoET02tBfqiUJisg",
	"lJMP378kT58+fWEWUlCtIXNENriqZvZwTbb77HCWUQ3+c5/WaL4RkvIsqdt/+P4lzn/iFji1FVUK4ofl",
	"yHwhx6+GFuA7RkiIcQ0b3IcW9ZsekUPR/LyCtZAwcU9s4zvdlHD+33RXUqrTbSkY15F9IfiV2M9RHhZ0",
	"H+NhNQCt9qXBlDSDfjxIXnz+8nj++ODqDx+Pkv9yfz5/ejVx+S/rcfdgINowraQEnu6SjQSKp2VLeR8f",
	"Hxw9qK2o8oxs6TluPi2Q1bu+xPS1rPOc5pWhE5ZKcZRvhCLUkVEGa1rlmviJScVzw6bMaI7aCVOklOKc",
	"ZZDNDfe92LJ0S1Kq7BDYjlywPDc0WCnIhmgtvrqRw3QVosTAdSN84IL++yKjWdceTMAlcoMkzYWCRIs9",
	"15O/cSjPSHihNHeVut5lRU63QHBy88Fetog7bmg6z3dE475mhCpCib+a5oStyU5U5AI3J2dn2N+txmCt",
	"IAZpuDmte9Qc3iH09ZARQd5KiBwoR+T5c9dHGV+zTSVBkYst6K278ySoUnAFRKz+Cak22/4/Tv72jghJ",
	"fgCl6Abe0/SMAE9FNrzHbtLYDf5PJcyGF2pT0vQsfl3nrGARkH+gl6yoCsKrYgXS7Je/H7QgEnQl+RBA",
	"dsQ9dFbQy/6kp7LiKW5uM21LUDOkxFSZ092CHK9JQS//fDB34ChC85yUwDPGN0Rf8kEhzcy9H7xEiopn",
	"E2QYbTYsuDVVCSlbM8hIPcoIJG6affAwfj14GskqAMcPMghOPcsecDhcRmjGHF3zhZR0AwHJLMiPjnPh",
	"Vy3OgNcMjqx2+KmUcM5EpepOAzDi1OPiNRcaklLCmkVo7MShw3AP28ax18IJOKngmjIOmeG8CLTQYDnR",
	"IEzBhOPKTP+KXlEF3z4busCbrxN3fy26uz6645N2Gxsl9khG7kXz1R3YuNjU6j9B+QvnVmyT2J97G8k2",
	"p+YqWbMcr5l/mv3zaKgUMoEWIvzFo9iGU11JOPzEH5m/SEJONOUZlZn5pbA//VDlmp2wjfkptz+9FRuW",
	"nrDNADJrWKPaFHYr7D9mvDg71pdRpeGtEGdVGS4obWmlqx05fjW0yXbM6xLmUa3KhlrF6aXXNK7bQ1/W",
	"GzkA5CDuSmoansFOgoGWpmv853KN9ETX8lfzT1nmprcu1zHUGjp29y3aBpzN4Kgsc5ZSg8QP7rP5apgA",
	"WC2BNi2WeKEefglALKUoQWpmB6VlmeQipXmiNNU40n9IWM8OZ39YNsaVpe2ulsHkb02vE+xk5FEr4yS0",
	"LK8xxnsj16gRZmEYNH5CNmHZHkpEjNtNNKTEDAvO4ZxyvWj0kRY/qA/wRzdTg28rylh8d/SrQYQT23AF",
	"yoq3tuEDRQLUE0QrQbSitLnJxar+4ZujsmwwiN+PytLiA0VDYCh1wSVTWj3E5dPmJIXzHL9akDfh2Chn",
	"C57vzOVgRQ1zN6zdreVusdpw5NbQjPhAEdxOIRdmazwajAx/FxSHOsNW5Ebq2UsrpvFfXNuQzMzvkzr/",
	"PkgsxO0wcaEW5TBnFRj8JdBcvulQTp9wnC1nQY66fW9GNmaUOMHciFZG99OOO4LHGoUXkpYWQPfF3qWM",
	"owZmG1lYb8lNJzK6KMzBGQ5oDaG68Vnbex6ikCApdGD4Lhfp2V+o2t7BmV/5sfrHD6chW6AZSLKlaruY",
	"xaSM8Hg1o005YqYhau9kFUy1qJd4V8vbs7SMahoszcEbF0ss6rEfMj2QEd3lb/gfmhPz2Zxtw/rtsAty",
	"igxM2ePsPAiZUeWtgmBnMg3QxCBIYbV3YrTua0H5spk8vk+T9ui1NRi4HXKLMEtvzIFHKyFvdiQ6tM5J",
	"Y+Qk1IwacIR5Z2exaVUmDj8RQ4lt0Bmo8SuNU3J3+BiuWlg40fRfgAVlRr0LLLQHumssiKJkOdzBed1G",
	"OZHRXJ8+ISd/OXr++MlPT55/a7hGKcVG0oKsdhoU+cYpDETpXQ4P+ytDkb3KdXz0b59501h73Ng4SlQy",
	"hYKW/aGsyc3ey7YZMe36WGujGVddAzjlWJ6CYS8W7cRakw1or5gy136xupPNGEJY1sySEQdJBnuJ6brL",
	"a6bZhUuUO1ndhX4FUgoZMfrgEdMiFXlyDlIxEbHfv3ctiGvhZa6y+7uFllxQRczcaI+sON5yEcrSlxxB",
	"YxoKtU9msEOfXvIGN25AKiXd9dBv1xtZnZt3yr60ke/NW4qUIBN9yUkGq2rTEs/XUhSEkgw74sXxBvTJ",
	"jqdo6rkLIh3WHQrG0e6sdjwNFAmzUTlkm9YmXF9huJrP3rLNVgciwXspxPrOhcPoLLHdwQ9WoMpNn75Y",
	"9U5kYNTaSt3BTdUM1hCCwW24/XQlKk0o4SID1IErFb/DBhyp6MFBx5MOr0W9tTLSCoy+ldLKrLYqCbpV",
	"eseq6ZjQ1G5tgqhRA3bn2mFgW9nprJMul0Azo4cBJ2LljLvO7IyLpOgT0v4WcDdohNBacJVSpKCU0Z+t",
	"VrQXNN/OnjA9gicEHAGuZyFKkDWVNwRWC03zPYBimxi4tcjrLOJ9qKdNP7aB3cnDbaTSqNCWCox8bQ5c",
	"DhqGUDgRJ+cg0TL8L90/P8lNt68qB+I2nJR4ygrUxDnlQkEqeKaig+VU6WTfsTWNWqKsWUFwUmInFQce",
	"4OhvqdLWP8B4hmqNZTc4j+XuZophgAdvczPy3/1F3h87NXySq0rVt7qqylJIDVlsDRwuR+Z6B5f1XGId",
	"jF2LDlqQSsG+kYewFIzvkGVXYhFEdW1Gcw60/uLQ2GTugV0UlS0gGkSMAXLiWwXYDX3XA4AYHbjuiYTD",
	"VIdyaof5fKa0KEtz/nRS8brfEJpObOsj/WPTtk9cVDd8PRNgZtceJgf5hcWsjVrYUqN/4MikoGfmbkJt",
	"wjoy+jCbw5goxlNIxijfHMsT0yo8AnsO6YAi5+Kigtk6h6NDv1GiGySCPbswtOAB6eo9lZqlrERJ4q+w",
	"u3PBqjtB1ABHMtCUGU0n+GCFrDLsT6xnqjvmzQStSQpAH/yeBhBZTs4UXhht4M9gh5b49zbk4TQIlLgD",
	"STEyqjndlBME1DtSzYUcNoFLmup8Z645vYUduQAJRFWrgmltY1jagqQWZRIOEDWujMzozFs2XMDvwBR7",
	"2wkOFSyvvxXzmRVbxuE77QguLXQ4gakUIp+guPSQEYVgkieElMLsOnMhUz6uxlNSC0gnxKBts2aeD1QL",
	"zbgC8r9ERVLKUQCrNNQ3gpDIZvH6NTOYC6ye0/k8GgxBDgVYuRK/PHrUXfijR27PmSJruPBxhqZhFx2P",
	"HqGW9F4o3Tpcd6CmmuN2HOHtaHUyF4WT4bo8Zb/N3Y08ZSffdwavTVXmTCnlCNcs/9YMoHMyL6esPaSR",
	"af4GHHeSQSkYOrZu3He8Wl9Brqm687smGDsG38tQgc6wmfMP2rhpF3hzNZ+hV/pfY2hoho6B2J848OU1",
	"H4fceUYIzHd3cJnYgYiEUoLCox8qT8p+FeswXtbxBrVTGoq+/cF2/WlA+vrgZZeeKCx4zjgkheCwi6aI",
	"MA4/4MdYb8t+BjrjRTDUtyvbteDvgNWeZ8pRuS1+cbeD8/a+9mPfweZ3x+2YnsJIYVSdIS8JJWnOULEW",
	"XGlZpfoTpyi6Bwwn4lrxCsmwMvfSN4lrjxHlzg31iVNlcFgL9FFz8Boiqvr3AF6nU9VmA0p3hJg1wCfu",
	"WjFOKs40zlWY/UrshpUg0b+xsC0LuiNrmqPu+StIQVaVbl/rGNCotFENrR3MTEPE+hOnmuRg1OQfGD+9",
	"xOG8kdXTDAd9IeRZjYVF9DxsgINiKom7gN7Yr+gydsvfOvcxZpfYz9bSY8Zvoh53GloZE//7m/88/HiU",
	"/BdNfj1IXvx/y89fnl09fNT78cnVn//8f9o/Pb3688P//I/YTnnYY+F2DvLjV07kPX6Fck1jAevBfm9m",
	"kYLxJEpkofW8Q1vkGyOdeQJ62NjS3K5/4vqSG0I6pznLqL4ZOXRZXO8s2tPRoZrWRnS0XL/WzzEX+kYk",
	"JU3P0IM62zC9rVaLVBRLL+ovN6IW+5cZhUJw/JYtacmWqoR0ef54j9xxC35FIuyqw2RvLBD0/a/xEFm0",
	"q7qoVzx564pboqiUs6RiBJj3g4n1vA6DtumPhwRjZLfUO3Hdn0+efzubN7Gt9ffZfOa+fo6cCZZdxiKY",
	"M7iMiZPuqOERe6BISXcKdJwPIexRl591roTDFmD0ELVl5f3zHKXZKs4rfVyNU0sv+TG3AS/mJKINeedM",
	"U2J9/3BrCZBBqbextKiWzIGtmt0E6Ph9SinOgc8JW8CiqxZmG1De+ZgDXWN6DtpBxZQ4wfocWELzVBFg",
	"PVzIJN0rRj8oJju+fzWfOTHi7rUPN3AMru6ctcHY/60FefDm9SlZOtarHthgejt0EP4cMbe4CL+WR1B3",
	"lJpP/BN/BWvGmfl++IlnVNPliiqWqmWlQH5Hc8pTWGwEOfRBg6+opp94T2YbzNcOwjVJWa1ylpKzULZu",
	"yNPm4PVH+PTpo+H4nz597rmX+pKwmyrKX+wEyQXTW1HpxCUZJRIuqMwioKs6yQRHtimCY7POiRvbsmKX",
	"xOTGj/M8WpaqG2zeX35Z5mb5ARkqF0pttowoLaSXaoyoY6HB/X0n3MUg6YXPUKsUKPJzQcuPjOvPJPlU",
	"HRw8BdKKvv7ZCQ+GJncltAxzNwqG7xrlcOFWQ4JLLWlS0g2o6PI10BJ3HyXvAk3AeU6wWyvq2wcQ4VDN",
	"Ajw+hjfAwnHtCFZc3Int5bPF40vAT7iF2MaIG41n5ab7FcSB33i7OrHkvV2q9DYxZzu6KmVI3O9MnUS6",
	"MUKWd3cptuHmELh82xWQdAvpGWSY+gdFqXfzVnfvUXUiq2cdTNkUWRvFiXlcaMNcAanKjDqhnvJdN6FG",
	"gdY+i+gDnMHuVDRpYNfJoGkndKihg4qUGkiXhljDY+vG6G6+885jEHtZ+rwIDJD1ZHFY04XvM3yQrch7",
	"B4c4RhSthIMhRFAZQYQl/gEU3GChZrxbkX5seUZfWdmbL5JR63k/cU0aNcx52MPVYB6F/V4A5tuLC0VW",
	"1MjtwqWK26SFgItVim5gQEIOzcgTUwNapmccZN+9F73pxLp7ofXumyjItnFi1hylFDBfDKmgMtOJq/Az",
	"WU8FrmBBsAKMQ9gqRzGpDumwTIfKljnflrQYAi1OwCB5I3B4MNoYCSWbLVU+ix2T/f1ZniQD/AuTcMZS",
	"L4+DkIAgo79OrPQ8t3tOe9qlS8D0WZc+1TJULSekTRoJH6PUYtshOApAGeSwsQu3jT2hNAlBzQYZOP62",
	"XueMA0li0QVUKZEyW4aguWbcHGDk40eEWGMymTxCjIwDsNEDhwOTdyI8m3xzHSC5S2iifmz03QV/QzzM",
	"1caPGZFHlIaFMz4Q+ec5AHUhKfX91QmMwmEI43Ni2Nw5zQ2bcxpfM0gvAxDF1k6+n/MBPxwSZ0ds+fZi",
	"udaa7FV0k9WEMpMHOi7QjUA8LkrEtkAhvpwtq8bV0F06ZeqB63sIV98EuYM3AqCj6TdVtpzmt1dDa9/N",
	"/ZusYenzJifeh77GaH+IfqK7NIC/vgmizvZz+vMHSIXMIlmfrpiaOQyT8/xapdHGfbSt8Zt+IwC/78oX",
	"UatC25ndzswMBL7Y3WEOdd8503cBKcgBRfikJfIkZzGXndFEAO+HE98tMDVg/iflu4dBhISEDVMaGuO5",
	"uUa9N+i+jYkUy04IsR5enS7l2qzvgxD1pWLzmrFja5n3voJzoSFZM6l0gp6H6BJMo+8VqsDfm6ZxyaYd",
	"g2ErMLEszsxw2jPYJRnLqzi9unn/+spM+662GqlqdQY7lF+Bpluywoph0ciskalt8N7ogt/aBb+ld7be",
	"aafBNDUTS0Mu7Tl+J+eiw8nG2EGEAGPE0d+1QZSOMEiUVDCYJMIdAynHHk4MJ1mM2Up7hynzY+8NF7FQ",
	"DF+qdqToWsryA9gkucGraQREWpYJ4xlcDtQ07JtQKsa1rX9zV6U1OuMkRup1wdD9YF/TuLQlD25ShqPp",
	"PjbNsHBTo2sY7OgkA1tXW2ZGCRBnRNMC00GttH4O0AD7omXJssuO0dmOOmiauBmCO4jDg+kG24OBgCRi",
	"YeYSVLveSKNJ2ap3PFzbYhJmTttVQUJeHk7FlK/Z2keU4UpYWHAfrk6B5n+F3d9NW1zO7Go+u52NOoZr",
	"N+IeXL+vtzeKZ4ymsDbLlsvpmiinZSnFOc0TZ8kfIk0pzh1pYnNv+L/nWyrO7E5fH71978C/ms/SHKhM",
	"ailvcFXYrvzdrMqWNhk4IL4mpFGuvX5otYBg8+t6DKH1/2ILrv5eoEj0CgU1np3gKDpvwDoe1LXXtu+c",
	"UHaJI84oKGtfVGMnta6otvuJnlOWewOlh3YgAAsXN+1KjHKFcIBbu7HCC+pO2U3vdMdPR0Nde3hSONdI",
	"hcDCFsFURPBurIKR/tHuiaRaUCzzY81PfebEqyIxxy9ROUvjxmy+UoY4uHVSmsYEGw/oEWbEig34vHnF",
	"grFMMzXBqNIBMpgjikxfMmoIdyvhqpdXnP1SAWEZcG0+STyVnYOKcdPOrdG/Tr3I2J7LDWxdIc3wt5Ex",
	"whJX3RvPCWJjAkboEu2B+6q2dviF1qY/80Pg+7lGZEU4Y+9KHImKcPThqNnGm27brs3JgvneSufe7uBq",
	"bQ3MEa1czlSyluJXiKvoaNmI5KD4ol4Mw4l+Bb6IpPJ1WUxtSWwKsDezD273kHQTWjzb0SADVI87H/g/",
	"sbqQdwVQbrfaFhJuBRXGCSYMBF7a8RuCcTD3gqdzerGisdJLRsgwMB01nvaW00IL4jt73Dv/CnN11hYk",
	"cNrXbZnNzixBNulh/UoANxQY7LSTRYVGMkCqDWWCuXW05kpEhqn4BeW2HrXpZ4+S663A2i1NrwshMbda",
	"xf0rGaSsoHlccsgQ++1c9IxtmK3GXCkIyv26gWwZe0tFrmSyjWVoUHO8JgfzoKC4242MnTPFVjlgi8e2",
	"xYoq5OS1DbHuYpYHXG8VNn8yofm24pmETG+VRawSpBbqUL2pvYQr0BcAnBxgu8cvyDfoH1XsHB4aLLr7",
	"eXb4+AUa+O0fB7ELwJVdH+MmGbKTfzh2EqdjdBDbMQzjdqMuopnC9q2MYcY1cpps1ylnCVs6Xrf/LBWU",
	"0w3EQ3KKPTDZvribaAPt4IVnttC70lLsCNPx+UFTw58GEgYM+7NgkFQUBdOF86IpURh6amr52kn9cLZq",
	"vCvD5uHyH9EZXXpfXEeJvF97t73fYqvGkIF3tIA2WueE2oT6nDVhIr44JDn2ZTmwLl1djs7ixsxllo5i",
	"DkaNrEkpGdeoWFR6nfyJpFsqaWrY32II3GT17bNILb52+S1+PcDvHe8SFMjzOOrlANl7GcL1Jd9wwZPC",
	"cJTsYZOgE5zKQa95PDLRc/RuYOr40FOFMjNKMkhuVYvcaMCpb0V4fGTAW5JivZ5r0eO1V3bvlFnJOHnQ",
	"yuzQjx/eOimjEDJWpKk57k7ikKAlg3MMkoxvkhnzlnsh80m7cBvof1unkRc5A7HMn+VBReBWfpHbFHFu",
	"dd7jzrCqzU09MNj7Bpp0u+vNXCHRRbZXNDBNbMe+q1ie/b1JEe0UoJWUp9voTq1Mx5+apxBqNFksRas4",
	"bSnnkEeHs1LOT14aishr/xRT5ykYn9i2W1jWLrezuAbwNpgeKD+hQS/TuZkgxGo7Z66Oyc43IiM4T1My",
	"qOEL/Vq5QfHIXypQOpZ/hB9sXBha5IwmZ2sXEuAZ6kEL8sY+ZbYF0qpogvoHK6rcVsfACoPOVFyVuaDZ",
	"nJhxTl8fvSV2VtvHFvS2tRM3KH63VxEN15leJzKI2YllP0wfZzwc26xaaSwwpDQtylimqmlx6htgOmxo",
	"nUbBPMTOgryyOpHyEredxNDDmsnC6BL1aPZWRpow/9GapltUNlr8f5jkpxf99FSpgtdf6irudYkwPHcG",
	"blf305b9nBNhNMILpuwLVnAO7eTYOlPcKbs+Wba9PFlxbiklequOVTK4Cdo9cDZ6xBuwo5B1EH/Na8Fe",
	"e9etgXqCvaI1d7oFVXvPvtgEybo6t3+ZMKVccJZixZvgzawaZPca1hTvzoTiQPGIOee2V7PI4YqWca2D",
	"DR0WBwu7ekboENc3LwdfzaZa6rB/anx2aUs12YBWjrNBNvfViJ2Fi3EFruQbPowW8EkhWx4z5JBRJ+yN",
	"pQvMrBlQWb433945hRZDzs8YR9HVoc1Ft1sbFD7Wo428yzTZCFBuPe30YvXR9Flgpm0Gl58X/nEfHMM6",
	"nMyyrXe1P9SR97U636Zp+9K0tXVVmp9bQcx20qOydJMO16qOygP6kg8iOOIzqwWjALn1+OFoI+Q2GiSB",
	"96khNDhHFyuUxIWMDtRt7hSqP6d5ZSkKWxAbVxYtp8B4BIy3jEPz9FTkgkijVwJuDJ7XgX4qlVRbEXAS",
	"TzsFmqNfNcbQlHZG9dsO1dlgRAmu0c8xvI1NyekBxlE3aAQ3ynf1i1eGugNh4iU+tecQ2S8gjVKVE6Iy",
	"TErolJSOMQ7DuH3R+vYF0D8GfZnIdteS2pNznZtoKM90VWUb0AnNslitzO/wK8GvJKtQcoBLSKu61mBZ",
	"khQLtLQr1vSpzU2UCq6qYmQu3+CW06UiJke/wwmUz7poBl8QZL+G9b56/f7D65dHp69f2ftCEVXZRFMj",
	"c0soDENckGOuNBjRuVJAfg7R+DP2+7mz4DiYQSn5CNGG5ew9IWK6zWqH/8bqAQ4TkIuCuHYIpQ95sNW/",
	"rivet0fqCefm6CWKbZLpmMCr7/boaKa+2Xls+t/pgczFpg3IPRfBGGPG4R7F2PBrc7+FNSJ6RS7tDViX",
	"cMCoN+FfpUHttk4+bjNPnwTSmzN4YGTc3jX8VMgc7+iBsOWg9Ae1YoB13w0FL6eDsfZUuxw9Tckop8T3",
	"PWIj2PAZ+66IfXw5arocCpmxETPmc6/3NAG2pw7g2KMI9bFYfYD+6gM9SUmZ8003zKKPWRfN38+vmBIs",
	"2mxwdxEuRh4Hia0k/sjBcBWepvIOXgOlUKwpzBt7/WBiINApPmAQVBHqj+W98OeQaiPUB95FCXCdmkJm",
	"suDZma/VeAbUjzpeyhXhGau80y/BvIfZ9NJtgpQxW752Mb3OzFEdQ4KebXz4ZQPcvfzSjsaeHBO6XkOq",
	"2fme9KZ/GC21SZ2Zez3WPisWZDuxOsbQP/d+TfW6AWgs+2gUnqA63a3BGYqQP4PdA0Va1BCtpzv3PO8m",
	"ZQwQA8gdEkMiQsV8tNbw5txmTNWUgVjwMRG2OzQFoQYfMgiS9W44lydJQsMEvpEpz0VMc580l+l6rTxc",
	"DJcbyoDqlxIfFoReYeV2VT9CU7/nHmg15LhfLO7ClVHAZLTa1uwLKoDyv/nMUztLzs4gfGoBLfsXVGa+",
	"RVRV9VpwMnIf9XJffBnsLtDrembWRLD1sx0i5YfQ2ZXmQjG+SYaCPdtBY+Ebo+gax+sAa7QjXGuQ7okV",
	"NCHnQkGihY94G4NjDBXuPcybIEENlvyzwA0W4vjQVBrBIqoUC29Q5/YPF2j0Vmqgk0E9kOE5x5D90n73",
	"4f2+iOYEjdzRa7K3oIePXWSqh8SQ6tfE3Zb70wZuovUyzu3rYSpWHIQbVIbW41KKrErtBR0ejMbGMLX0",
	"zggriSqMaX+VPdk/x0JUb4MkrDPYLa38nW4pbyqCtY+1FaHsGoJ89c5u36lBIK775Bu7gM2dwPlbKtXz",
	"WSlEngyYi4/7NU66Z+CMpWeQEXN3+KifgccMyDdopaz9gRfbna/pUZbAIXu4IMSo5UWpd9412C7X25mc",
	"P9Bj81/irFllyw45fX/xiccD1rAgkLwlf/PDjHM1BYb53XIqO8ieIiKXA/VVJL2IPO0x9eXciLOu+9xC",
	"Q1QWipiUElb7Hyq4cW0TX7uOxx248zthRrER6+Is04uZ7Rv1KoKvGya0TwKqbyOJLDR4+mBcWwzrXfi8",
	"5lRIa2pD6dIbwLrC3g+NBW3aIwy+wx7wQiNC8AyD594OnN84Cu6HGinBUj4PUUJr+fvsEv6B7JqPB1uk",
	"MMbeLFPZ8ouiL4QHRif1srblxPHcN/lgcQvBsUJR31Sk0PSKVX5DwjF8TJ7T/P7NPVj15Ajx4R48iy80",
	"tBeESLaoVDeL7nhLJ80d2Abubmr+Hs1T/wCzR1GbuRvK2Z3r5y981U6sRkdzkovmrR4cklzgmNbI/vhb",
	"snIx16WElCnWSUe58AVIa/UY63E37+CN6+P71vl3oW9Bxk6hEiV51xQz1ALv0wbC5oj+xkxl4ORGqTxG",
	"fT2yiOAvxqPC5Oc918VZy/pui8N2ol+EhDu2wgdu/2ta4ftp3VOXh+vAS6dS0F/n5Nu6hdvIRd2sbaoL",
	"qY/cYc+PXk3x/MQLWZru6HqyCMEqsARBJT8//plIWOMzD4I8eoQTPHo0d01/ftL+bI7zo0dRsffenE6t",
	"1+/dvDGK+ftQtKSNCBwIzO3sR8XybB9htMKsmydXMJD4J5dC8Js8+vITy+JH1ZXLv467u7sJiJjIWluT",
	"B1MFAdQTYqddt0ikNGpyaSWZ3mFlA2+uZD9Fi329qT0czkNW58K6u0+LM6hrYzT+kEr52/WNoDneR0am",
	"xmADjY8Evr6kRZmDOyh/frD6Izz907Ps4OnjP67+dPD8IIVnz18cHNAXz+jjF08fw5M/PX92AI/X375Y",
	"PcmePHuyevbk2bfPX6RPnz1ePfv2xR8fGD5kQLaAznwe3ex/4stIydH74+TUANvghJasfhvUkLF/lIGm",
	"eBKhoCyfHfqf/n9/whapKJrh/a8zl6Yz22pdqsPl8uLiYhF2WW7QAJpoUaXbpZ+n/ybj++M6IN2mfuOO",
	"2lhjQwq4qY4UjvDbh9cnp+To/fGiIZjZ4exgcbB4jI+ZlcBpyWaHs6f4E56eLe770hHb7PDL1Xy23ALN",
	"0V9o/ihAS5b6T+qCbjYgF+51CvPT+ZOlFyWWX5zx92rs2zIs9Lr80rKRZ3t6orq6/OLT7sdbt/LanW8g",
	"6DARiuEp7avjyy8oyg7+vnQJG/GPqFJYWl16h0+8ZWs1X/Qly666PdwjwMsvzavcV/Yw5xBz79g8Bxo8",
	"4j0nTBO6EhLz0nW6NefXJ8Qy1X7EvSbG48wQoen1sn6hPKgFdvixJ43bgYgfCU+sIcfmQLVmanimlhWE",
	"5anqG6HVvrkXPh4kLz5/eTx/fHD1B8P33Z/Pn15N9NO+bB44P6mZ+sSGnzGbFC3OeM6eHBzc4mm8Ix6+",
	"to6bFLzA2CvQ4B6ELoa0bLdVnYFIjYw9WW+d4QeeeH52zRWP2nlaUVGRl26+oxnxqT849+P7m/uYo5fc",
	"8F9i75er+ez5fa7+mBuSpznBlkEZg/7W/8jPuLjgvqURBqqioHLnj7FqMQXiNhuvHLpRaCWV7JxqmH1G",
	"M3wsRnSAuShNb8BcTkyvr8zlvpgLbtJdMJf2QHfMXJ5c84D//lf8lZ3+3tjpiWV309mpE+VskHhftrRZ",
	"p0v7Sm//5x1PxwS+H7kC9/K6y17d8bQpvdzmudj4ZMdTb0yLsJv7psmTGl4sYIMBH19p00z/9B43AeQ5",
	"S4GcQlEKSSXLd+RHXuec3visfIBCnIOqH6ZtiNPwU6OG2jdqpSgCGh6SSjaxkoNvwDuV+nN4h1ozbPs8",
	"vNl7Gm76KOtIIM8kOPdE3tnh/ztcKV+P77/18dWV5IPHK7h1MJIUShskQ1KabmH0Mgxut+BGHNA7TkaO",
	"uMtsHzrhJ+0TPqplxJ/NcrEL1i2dgWKuxGtEB5E1HxlSP8aK1A2I//d9oF9S7k9ya69t0BKVOQNZ7z/l",
	"/WIDX8//v8359wq/tGUwNeS5Ck+9FnjqbRyHSw3gNr5mLwfovUgYvd0tB8L8IJub2n9pJXard/NJ1G1v",
	"92nRqd0slr6zqO8VGFvZ//P64bODZ/cHQft1qr/CjrwTmnyPTP13qqtOOz5jFsCORyDLekRu7ztQ+juR",
	"7UYwVKhN6SohROxxK8YNyH2rSg81p1uIJIDZNAUfjspFBr2L+OpOJXwDwnFExMe4Pnzgb+1rDAegRrOZ",
	"uuGqduRJL9R3Bq+f+KpWBVPe7/6Vh3zlIf8+QslRlkVTQNtHv8fT5rPLJBUZbIAnjmElK5HtfNX51oBn",
	"YCM7eoLK8kv71S/rPR60zr3C3wklG5Sk+kCvduT4VU+Csd26nPa7HTbt6DARPaQL4qhK0uVFA06IMTI3",
	"C9kITVzJRbeor4znK+O5lfAy+fBMtxU6faZ7J899QcdYkVqq+1NP0Tl+0+N6Jxvd12di+otNlYWMBB9s",
	"TYcumr+yhK8s4XYs4Q1EDiOeWsckIkR3kwiHPoPArMCs+3YuRv/65lVOJZrNppkpjnBEZ5y4Dy5x30pa",
	"FFdZbUq8ZDbBJ7Jhd6u3fWVxX1nc7yhaaz+jaQsi19Z0zmBX0LLWb9S20pm44CP+lxJSRnP3BAwmH9WB",
	"zFoQP0BTfIf8zRUuy3eYccUyI8ZpVoARqWpeZzr7lOomF9CMQNTWJV1tGMcJkFXgLPatIxqUtVCQCp6p",
	"iPfHQfbO6oQxJvtLBcjRHG4cjLN5K8jIbeN0p810kus7cK9GjOZIFTZNsh9IYj5Wqvv38oIynayFdCVv",
	"EH39zhpovnT1gDu/NrXtel+wYF/wYxDQHP91Wb8fEP3YjeiOfXWR0r5Rk7IRpkDgBtfJDx8/m33Ch1zc",
	"3jcR/YfLJdaJ2Aqll7Or+ZdOtH/48XO9NV/qa9lt0dXnq/8bAAD//1jtczhBzwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
