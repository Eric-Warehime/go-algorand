// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetRoundStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4Ilj0Z3pAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
