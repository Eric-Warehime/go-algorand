// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.DELETE("/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET("/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST("/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
