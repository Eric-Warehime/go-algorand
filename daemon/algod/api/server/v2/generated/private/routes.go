// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundDeltas object for a given round
	// (GET /v2/deltas/{round})
	GetRoundDeltas(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundDeltas(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundDeltas(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/deltas/:round", wrapper.GetRoundDeltas, m...)
	router.DELETE("/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET("/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST("/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bc2n6lq2W3T18er/BwAA//92/Cm+NuAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
