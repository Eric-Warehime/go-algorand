// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundDeltas object for a given round
	// (GET /v2/deltas/{round})
	GetRoundDeltas(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundDeltas(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundDeltas(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/deltas/:round", wrapper.GetRoundDeltas, m...)
	router.DELETE("/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET("/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST("/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p9cAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
