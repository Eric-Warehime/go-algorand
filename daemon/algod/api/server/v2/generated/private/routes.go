// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundDeltas object for a given round
	// (GET /v2/deltas/{round})
	GetRoundDeltas(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundDeltas(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundDeltas(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/deltas/:round", wrapper.GetRoundDeltas, m...)
	router.DELETE("/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET("/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST("/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
