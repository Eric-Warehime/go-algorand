// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetRoundStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//9ElufdV6QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
