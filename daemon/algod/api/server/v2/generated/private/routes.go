// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST("/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7Lbo6vPV/w0AAP//YVn4zUfNAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
