// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZFdYYfP9x/8XAAD///madl4Z3gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
