// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
