// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
