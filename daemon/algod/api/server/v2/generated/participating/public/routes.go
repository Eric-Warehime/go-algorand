// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
