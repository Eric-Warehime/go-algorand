// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kmgm3AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
