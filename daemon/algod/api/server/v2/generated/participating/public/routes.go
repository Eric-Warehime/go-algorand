// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"

	"github.com/algorand/oapi-codegen/pkg/runtime"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
