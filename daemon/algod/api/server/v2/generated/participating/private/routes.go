// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
