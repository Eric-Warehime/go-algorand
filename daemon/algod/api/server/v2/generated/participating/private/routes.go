// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+nz1/wMAAP//f1Z/oovFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
