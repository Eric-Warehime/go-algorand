// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+3PbONLgv4LS91VlkhMl5zGzG1dtfeeJM7O+ZLKp2Dt798W5GYhsSVhTABcAbWly",
	"/t+v0ABIkAQp+rHO7FZ+Sizi0Wg0Gv3G50kqNoXgwLWaHH6eFFTSDWiQ+BdNU1FynbDM/JWBSiUrNBN8",
	"cui/EaUl46vJdMLMrwXV68l0wukG6jam/3Qi4R8lk5BNDrUsYTpR6Ro21Aysd4VpXY20TVYicUMc2SFO",
	"jifXAx9olklQqgvlX3i+I4yneZkB0ZJyRVPzSZErptdEr5kirjNhnAgORCyJXjcakyWDPFMzv8h/lCB3",
	"wSrd5P1Luq5BTKTIoQvnK7FZMA4eKqiAqjaEaEEyWGKjNdXEzGBg9Q21IAqoTNdkKeQeUC0QIbzAy83k",
	"8ONEAc9A4m6lwC7xv0sJ8BskmsoV6MmnaWxxSw0y0WwTWdqJw74EVeZaEWyLa1yxS+DE9JqRn0qlyQII",
	"5eTDD6/I8+fPX5qFbKjWkDki611VPXu4Jtt9cjjJqAb/uUtrNF8JSXmWVO0//PAK5z91CxzbiioF8cNy",
	"ZL6Qk+O+BfiOERJiXMMK96FB/aZH5FDUPy9gKSSM3BPb+F43JZz/i+5KSnW6LgTjOrIvBL8S+znKw4Lu",
	"QzysAqDRvjCYkmbQjwfJy0+fn06fHlz/x8ej5L/dn98+vx65/FfVuHswEG2YllICT3fJSgLF07KmvIuP",
	"D44e1FqUeUbW9BI3n26Q1bu+xPS1rPOS5qWhE5ZKcZSvhCLUkVEGS1rmmviJSclzw6bMaI7aCVOkkOKS",
	"ZZBNDfe9WrN0TVKq7BDYjlyxPDc0WCrI+mgtvrqBw3QdosTAdSt84IJ+v8io17UHE7BFbpCkuVCQaLHn",
	"evI3DuUZCS+U+q5SN7usyNkaCE5uPtjLFnHHDU3n+Y5o3NeMUEUo8VfTlLAl2YmSXOHm5OwC+7vVGKxt",
	"iEEabk7jHjWHtw99HWREkLcQIgfKEXn+3HVRxpdsVUpQ5GoNeu3uPAmqEFwBEYu/Q6rNtv+v07+8I0KS",
	"n0ApuoL3NL0gwFOR9e+xmzR2g/9dCbPhG7UqaHoRv65ztmERkH+iW7YpN4SXmwVIs1/+ftCCSNCl5H0A",
	"2RH30NmGbruTnsmSp7i59bQNQc2QElNFTnczcrIkG7r908HUgaMIzXNSAM8YXxG95b1Cmpl7P3iJFCXP",
	"Rsgw2mxYcGuqAlK2ZJCRapQBSNw0++Bh/Gbw1JJVAI4fpBecapY94HDYRmjGHF3zhRR0BQHJzMhfHefC",
	"r1pcAK8YHFns8FMh4ZKJUlWdemDEqYfFay40JIWEJYvQ2KlDh+Eeto1jrxsn4KSCa8o4ZIbzItBCg+VE",
	"vTAFEw4rM90rekEVfPei7wKvv47c/aVo7/rgjo/abWyU2CMZuRfNV3dg42JTo/8I5S+cW7FVYn/ubCRb",
	"nZmrZMlyvGb+bvbPo6FUyAQaiPAXj2IrTnUp4fCcPzF/kYScasozKjPzy8b+9FOZa3bKVuan3P70VqxY",
	"espWPcisYI1qU9htY/8x48XZsd5GlYa3QlyURbigtKGVLnbk5Lhvk+2YNyXMo0qVDbWKs63XNG7aQ2+r",
	"jewBshd3BTUNL2AnwUBL0yX+s10iPdGl/M38UxS56a2LZQy1ho7dfYu2AWczOCqKnKXUIPGD+2y+GiYA",
	"VkugdYs5XqiHnwMQCykKkJrZQWlRJLlIaZ4oTTWO9J8SlpPDyX/Ma+PK3HZX82Dyt6bXKXYy8qiVcRJa",
	"FDcY472Ra9QAszAMGj8hm7BsDyUixu0mGlJihgXncEm5ntX6SIMfVAf4o5upxrcVZSy+W/pVL8KJbbgA",
	"ZcVb2/CRIgHqCaKVIFpR2lzlYlH98M1RUdQYxO9HRWHxgaIhMJS6YMuUVo9x+bQ+SeE8J8cz8mM4NsrZ",
	"guc7czlYUcPcDUt3a7lbrDIcuTXUIz5SBLdTyJnZGo8GI8PfB8WhzrAWuZF69tKKafxn1zYkM/P7qM7/",
	"GiQW4rafuFCLcpizCgz+Emgu37Qop0s4zpYzI0ftvrcjGzNKnGBuRSuD+2nHHcBjhcIrSQsLoPti71LG",
	"UQOzjSysd+SmIxldFObgDAe0hlDd+qztPQ9RSJAUWjB8n4v04s9Ure/hzC/8WN3jh9OQNdAMJFlTtZ5N",
	"YlJGeLzq0cYcMdMQtXeyCKaaVUu8r+XtWVpGNQ2W5uCNiyUW9dgPmR7IiO7yF/wPzYn5bM62Yf122Bk5",
	"Qwam7HF2HoTMqPJWQbAzmQZoYhBkY7V3YrTuG0H5qp48vk+j9ui1NRi4HXKLwB0S23s/Bt+LbQyG78W2",
	"cwTEFtR90IcZB8VIDRs1Ar5jB5nA/Xfoo1LSXRfJOPYYJJsFGtFV4Wng4Y1vZqktr0cLIW/HfVpshZPa",
	"nkyoGTVgvtMWkrBpWSSOFCM2KdugNVDtwhtmGu3hYxhrYOFU038CFpQZ9T6w0BzovrEgNgXL4R5Ifx1l",
	"+guq4Pkzcvrno2+fPvvl2bffGZIspFhJuiGLnQZFvnG6GVF6l8Pj7spQOypzHR/9uxfeCtkcNzaOEqVM",
	"YUOL7lDWumlFINuMmHZdrDXRjKuuABxzOM/AcHKLdmIN9wa0Y6aMhLVZ3Mtm9CEsq2fJiIMkg73EdNPl",
	"1dPswiXKnSzvQ5UFKYWM2NfwiGmRijy5BKmYiLhK3rsWxLXw4m3R/t1CS66oImZuNP2WHAWKCGXpLR/P",
	"9+3QZ1te42aQ89v1Rlbn5h2zL03ke0uiIgXIRG85yWBRrhqa0FKKDaEkw454R/8I+nTHU7Sq3QeR9qtp",
	"G8bRxK92PA10NrNROWSrxibcXTdrY8Xb5+xUj1QEHIOOt/gZ1fpjyDW9d/mlPUEM9ld+Iy2wJDMNUQt+",
	"y1ZrHQiY76UQy/uHMTZLDFD8YMXz3PTpCunvRAZmsaW6h8u4HqymdbOnIYXThSg1oYSLDNCiUqr4Nd3j",
	"lkd/ILoxdXjz67WVuBdgCCmlpVltWRB00nU4R90xoaml3gRRo3q8GJX7ybay01mXby6BZkarB07EwrkK",
	"nBMDF0nRw6j9ReeEhMhZasBVSJGCUpAlzkSxFzTfzjIRPYAnBBwBrmYhSpAllXcG9uJyL5wXsEvQH67I",
	"N29+Vo+/ALxaaJrvQSy2iaG3UvicP6gL9bjphwiuPXlIdlQC8TzXaJeGQeSgoQ+FN8JJ7/61Iers4t3R",
	"cgkSPTP/VIr3k9yNgCpQ/8n0fldoy6InysspOmdsg3Y7TrlQkAqeqehgOVU62ceWTaOGNmZWEHDCGCfG",
	"gXuEkrdUaetNZDxDI4i9TnAeK6CYKfoB7hVIzcg/e1m0O3Zq7kGuSlUJpqosCiE1ZLE1cNgOzPUOttVc",
	"YhmMXUm/WpBSwb6R+7AUjO+QZVdiEUR1ZXR37vbu4tA0be75XRSVDSBqRAwBcupbBdgNI116AGGqRrQl",
	"HKZalFOF10wnSouiMNxCJyWv+vWh6dS2PtJ/rdt2iYvq+t7OBJjZtYfJQX5lMWtjnNbUqNA4MtnQCyN7",
	"oEJs3Z5dmM1hTBTjKSRDlG+O5alpFR6BPYe0xxbhoiiD2VqHo0W/UaLrJYI9u9C34B7DyHsqNUtZgZLi",
	"G9jdu+DcniBqricZaMqMsh58sEJ0EfYn1o/dHvN2gvQoHbYLfkeJjSwnZwovjCbwF7BDjeW9DZA6C8Kq",
	"7kETiIxqTjflBAH1YRdGgAmbwJamOt+Za06vYUeuQAJR5WLDtLYRb01FQYsiCQeI2gcHZnTGcBtc5Hdg",
	"jHX+FIcKltfdiunESlTD8J21xKoGOpwkVQiRj9C9O8iIQjDKb0oKYXaduQBLH4XnKakBpBNi0BNSMc9H",
	"qoFmXAH5P6IkKeUosJYaqhtBSGSzeP2aGcwFVs3pPKQ1hiCHDVg5HL88edJe+JMnbs+ZIku48lHJpmEb",
	"HU+eoBb8XijdOFz3YGkxx+0kwtvRcGouCifDtXnKfg+dG3nMTr5vDV5ZW82ZUsoRrln+nRlA62Rux6w9",
	"pJFx3kkcd5RNNBg6tm7cdzTz/HNsNPXQMei6EwdO9fpjn1/dyFf57h74tB2ISCgkKDxVoV6i7FexDAPX",
	"3bFTO6Vh0zXd2K6/9Ag2H7xY0JEyBc8Zh2QjOOyiuVqMw0/4Mdbbnuyezshj+/q2xaYG/C2wmvOMocK7",
	"4hd3OyDl91VAyT1sfnvcltUuDNlHrRTyglCS5gx1VsGVlmWqzzlFqTg4yxHHm5f1+/WkV75JXDGL6E1u",
	"qHNO0elaycpRZ8ESIlrwDwBeXVLlagVKt+SDJcA5d60YJyVnGufamP1K7IYVINH7NbMtN3RHljRHte43",
	"kIIsSt28MTGyWGmjdVkTopmGiOU5p5rkYDTQnxg/2+Jw3gTvaYaDvhLyosLCLHoeVsBBMZXEHYQ/2q8Y",
	"u+GWv3ZxHJjmZT9bo5MZvw4/3mlopC7932/+6/DjUfLfNPntIHn5P+afPr+4fvyk8+Oz6z/96f81f3p+",
	"/afH//WfsZ3ysMfiXh3kJ8dOmjw5RpGhtjp1YH8wi8OG8SRKZKFvpUVb5Bsj+HgCelyb9dyun3O95YaQ",
	"LmnOMqpvRw5tFtc5i/Z0tKimsREtBdKv9VMslmUlkoKmF+hfn6yYXpeLWSo2cy9Fz1eikqjnGYWN4Pgt",
	"m9OCzVUB6fzy6Z4r/Q78ikTYVYvJ3log6Hrn47HqaFB14ed48pYlt0RRKmfUxVBM7yUVy2mVj2DzkA8J",
	"BquvqXfxuz+fffvdZFoHmVffjaZuv36KnAmWbWOpBBlsY5KaO2p4xB4pUtCdAh3nQwh71CFs/VLhsBsw",
	"Ir5as+LheY7SbBHnlT7AzWl8W37CbeSZOYlont05q49YPjzcWgJkUOh1LD+xIXNgq3o3AVous0KKS+BT",
	"wmYwa2tc2QqUd03nQJeYJ4cmRjEmYLc6B5bQPFUEWA8XMkqtidEPismO719PJ06MUPcu2buBY3C156xs",
	"sf5vLcijH1+fkbljveqRzWqxQwd5CBFLhgu1bThTDTezWdk2reecn/NjWDLOzPfDc55RTecLqliq5qUC",
	"+T3NKU9hthLk0EfvHlNNz3lHZustnBDETZOiXOQsJRehbF2Tp02G7Y5wfv7RcPzz808dv1JXEnZTRfmL",
	"nSC5YnotSp24bL9EwhWVWQR0VWV74cg2V3do1ilxY1tW7LIJ3fhxnkeLQrWzPrrLL4rcLD8gQ+VyGsyW",
	"EaWF9FKNEXUsNLi/74S7GCS98qmipQJFft3Q4iPj+hNJzsuDg+dAGmkQvzrhwdDkroCGzetWWSltexcu",
	"3GpIsNWSJgVdgYouXwMtcPdR8t6gdTXPCXZrpF/48DIcql6Ax0f/Blg4bhxKjos7tb182Yb4EvATbiG2",
	"MeJG7bS47X4FCRm33q5WUkdnl0q9TszZjq5KGRL3O1Nlc6+MkOU9SYqtMFrHJb4vgKRrSC8gwxxc2BR6",
	"N210985KJ7J61sGUzVW34dSYUInmwQWQssioE+op37Uz2xRo7cOFPsAF7M5EnY95k1S2ZmaV6juoSKmB",
	"dGmINTy2boz25juPOGaTFIVPUMJIdU8WhxVd+D79B9mKvPdwiGNE0cj86UMElRFEWOLvQcEtFmrGuxPp",
	"x5Zn9JWFvfkiqe2e9xPXpFbDnPM6XA0mNNnvG8DCF+JKkQU1crtwNRts9lDAxUpFV9AjIYcW2pE5Og2r",
	"Lg6y796L3nRi2b7QOvdNFGTbODFrjlIKmC+GVFCZaYUs+JmsEwBXMCNYiskhbJGjmFTFdlimQ2XDUm5r",
	"y/SBFidgkLwWODwYTYyEks2aKl9OAqtu+LM8Sgb4J2bDDeVAnwTe9qC0RpXh7Hlu+5x2tEuXCe3Tn33O",
	"c6hajshfNhI+BvjFtkNwFIAyyGFlF24be0KpM/PqDTJw/GW5zBkHksQc91QpkTJbD6S+ZtwcYOTjJ4RY",
	"YzIZPUKMjAOw0bmFA5N3IjybfHUTILnLLKR+bHSLBX9DPAjahrIZkUcUhoUz3hM06TkAddEe1f3VijnC",
	"YQjjU2LY3CXNDZtzGl89SCcVF8XWVuKtc68+7hNnB2z59mK50ZrsVXSb1YQykwc6LtANQLwQ28RmQUQl",
	"3sV2Yeg9Gt2HORmxg2mTnh8pshBbdNnj1WKjyfbA0g+HByPQ8LdMIb1iv77b3AIzNO2wNBWjQoUk48x5",
	"Fbn0iRNjpu6RYPrI5Zsgj/lWALSMHXXFP6f87lVSm+JJ9zKvb7VpXZ/DB07Hjn/fEYruUg/+ulaYKvPY",
	"mRA+QCpk1m+nMITKdFVCsWtecAUgDd8YnZs8UM7xqKlteBWiu3M9nuUGPPU8A4g4tmH/HUhebwthpFub",
	"FmBzxB1SrJwowWY7KWuzUoyvcicY9KEptmAf1+Ixbpdc13zxA46TnWOb26PkD8FSFHE4bqKpfHD4GYCi",
	"55TXcKAcfkdIXJ74ICzX/fTxvi3aRw9KM0SjWZ0g0LVit4Mhn65ftOt9VZADas9JQ9tILmLe8vPzjwpQ",
	"NDv13QIrH9ZAoHz3OIj7kbBiSkPttzISrMf0Q9vxKZZeEmLZvzpdyKVZ3wchKnnO1vbAjo1lPvgKLoWG",
	"ZMmk0gk6/aJLMI1+UGh9+sE0jSsVzcgiW4WQZfFLFKe9gF2SsbyM06ub982xmfZdJTuocoGCCeMEaLom",
	"C6yaGY03HJjahqQOLvitXfBbem/rHXcaTFMzsTTk0pzjX+RctG66IXYQIcAYcXR3rRelAxdokGXX5Y6B",
	"gmEPJ16nsyE3RecwZX7svZFaPtevT5izIw2sBYOMegM8I6E9ZCVFWVimXhfMjubDcaGThvEjgq7KwKM0",
	"vbA5Hc0N5qvKphIPwLJ69aihXds9A/Lx4/H9wzkhOMnhEvL9gbQUMe4NOBhjYUfAIB6CIek+WmS/VN/d",
	"gRph1UrbMEappSPdDDlua9XIlbCqdWskWIM7l3w62ntnJDRPbzV9d113RZFkkEM01eNvQS4HLQpM2PaN",
	"Y2kPZjDGM9jGwbGfprGy1l3jfcm4tiUQ76u6Wmuc8csOa5CNQUFhq2XdvIJbv44Z7FKI5v5F9RBl5RwY",
	"ZMQ4eKXZBQ8CtKmv5xqnRcGybcvvaUfttY7fC8bwgnKD7cFAQBuxJCIJqll7rjbm2QrIjdIvs1GYOWtW",
	"iAtlmnAqpnz9/i6iqiTDfbg6A5q/gd3Ppi0uZ3I9ndzNTRrDtRtxD67fV9sbxTMG9Fm3WSPq4YYop0Uh",
	"xSXNE+dM7iNNKS4daWJz73t+YGktzvXOXh+9fe/Av55O0hyoTCptp3dV2K74l1mVLXPXc0B8ffA11ZV9",
	"zmrDweZXtblCB/TVGlwt5kCh7hSNrIMLgqPoHNLLeFzxXveyi4OwSxyIh4CiCoeoXXU2GqIZAUEvKcu9",
	"j8xD2xMDjIsbdzdGuUI4wJ0jKcK76F7ZTed0x09HTV17eFI410C16I0tiK6I4O1wOaMFo+sNSXVDseSj",
	"9YB0mRMvN+g1SFTO0rg/lS+UIQ5u42RMY4KNe/RpM2LJesKueMmCsUwzNcKo3QIymCOKTF8+tA93C+Fe",
	"sik5+0cJhGXAtfkk8VS2DiraT51nvXudxqVKN7D1xtfD30XGCMudtm88J3MNCRhhVE4H3OPK6ucXWnmf",
	"zA9B+MENgvvCGTtX4kBgnqMPR8025WHdjK4ZLaHvffXG299c3dWeOaKv2DCVLKX4DeKmKrTwRTIMfYFX",
	"hhGtvwGfRcT1NoupPDn1Yzz17L3b3SfdhB6nZkBiD9XjzgchOFhp0nujKbdbbR+VaMS1xwkmzEWZ2/Fr",
	"gnEwd/J3cnq1oLEynEbIMDAF7peG31wL4jt73DsfDXM1d2ckiBur2jKbe1+ArJN/u3V8bikw2GlHiwq1",
	"ZIBUG8oEUxvrkysRGabkV5Tbt0nQG4FHyfU2Cr43CF0JiZUzVNzFn0HKNlHj0vn5xyztunMztmL2ZY5S",
	"QfD0gxvIPmlkqcg9n2HD6WrUnCzJwTR4XMbtRsYumWKLHLDFU9tiQRVYo4qP3PBdzPKA67XC5s9GNF+X",
	"PJOQ6bWyiFWCVEIdqjdVoMoC9BUAJwfY7ulL8g2G6Ch2CY8NFt39PDl8+hIdrPaPg9gF4J7gGeImGbIT",
	"r//H6RhjlOwYhnG7UWdRa4B9N62fcQ2cJtt1zFnClo7X7T9LG8rpCuJRoZs9MNm+uJvoC2jhhWf20R+l",
	"pdgRpuPzg6aGP/XkrBn2Z8EgqdhsmN64QA4lNoae6ncd7KR+OPuCkCvJ6+HyHzEeqvDhIC0l8mH9PvZ+",
	"i60ao9be0Q000Tol1JZLyVkdqegLhZMTX40JaxRXpYktbsxcZuko5mDg4pIUknGNikWpl8kfSbqmkqaG",
	"/c36wE0W372I1GVu1gflNwP8wfEuQYG8jKNe9pC9lyFcX/INFzzZGI6SPa5zRINT2Ru4FQ/R6YsTGh56",
	"rFBmRkl6ya1skBsNOPWdCI8PDHhHUqzWcyN6vPHKHpwySxknD1qaHfrrh7dOytgIGSuxWB93J3FI0JLB",
	"JcbpxzfJjHnHvZD5qF24C/Rf1nnqRc5ALPNnuVcRuInHJ9AN0OcTRibextvT9PQ0ZK6o2wc1nHEeEPvs",
	"4D6/x10eJGl0vglUnkOPg67HiNBIgG1h7GYa8N1NDIHLp7FDfThqLi1Gmd+LyJJ9FfvKx+MyJiN2q74L",
	"xHwwDGrhhpqSZsXwh4+o8W6RbmSH+eJhxT/awH5hZoNI9ivo2cTgNYPodmbV9yC4jJLvxXbsprZ4t9/Y",
	"3wFqoigpWZ79XFcZaT0WISlP19FgkYXp+Ev9rF21OHuYozU215RzG43QtU2glvKL12Yi+tbfxdh5NoyP",
	"bNt+v8Iut7W4GvAmmB4oP6FBL9O5mSDEarPsQpXWl69ERnCeuqBjfa933z0JqtP/owSlY/cifrCpBWhR",
	"XxoqtkXigWdox5iRH+2z1GsgjXpzaD9gmzK3tctsqW7r6imLXNBsSsw4Z6+P3hI7q+1jH2eyxdlX9tpt",
	"rKI/PvcmgbZDsbX3kdFnVq00ln9Umm6KWLET0+LMN8CKKqF3CRXrEDszcmxtGsprzHYSQw9LJjeQkWo6",
	"J1UjTZj/aE3TNRoLGiy1n+THvyrgqVIFL3lWL3JVBVzx3Bm43cMC9l2BKRFGcrhiyr5GDJfQrK9SFRty",
	"YoCvt9Jcniw5t5QSlYqHimHdBu0eOBsF6R1QUchaiL+h9OLC1G/4yMIp9opWRGy/2NB5wtPW2KheWvKv",
	"zKeUC85SrEcYu5rdy8ZjvLMjSjfGMwNcvI2aRA5X9J2IKlnDYbH35QjPCB3iuu6h4KvZVEsd9k+NT+iu",
	"qSYr0MpxNsim/rkTZ6FmXIEryIuPXAd8UsiGxxs5ZDSIopaTb0hGmJzdY3L4wXx75wxSmLV4wTiqnj5H",
	"wiZIWhsyPryqjb7KNFkJzKBwhyJc00fTZ4bFWjLYfpr5h1pxDOswNsu20RHdoY58rISLTTBtX5m2tjRf",
	"/XMjD85OelQUbtL+x3Ci8oDe8l4ER3zeVaBXgNxq/HC0AXIbDHLC+9QQGlxiiAQUxKXG9DwM00qCMUKr",
	"pShsQWx8dLQiVzRM9C3jUD8jHLkg0uiVgBuD57Wnn0ol1VYEHMXTzoDmGBcRY2hKO6fYXYdqbbCLJy3S",
	"iZ+jfxvrN216GEfVoBbcKN9Vrxcb6g6EiVf4bLpDZPeFGpSqnBDlkmuab9bEGIdh3P5VrOYF0D0GXZnI",
	"dteS2pNzk5uor1TJosxWoBOaZTF7wvf4leBXkpUoOcAW0rKqBF0UJMUaf82ih11qcxOlgqtyMzCXb3DH",
	"6VIRk6Pf4QTKJ+7Wg88Isl/Deo9fv//w+tXR2etje18ookpbq8TI3BI2hiHOyAlXGozoXCogv4Zo/BX7",
	"/dpacBzM4K2qCNGG72V5QsT48MUO/41Va+4nIBfFdONUAB+ylFVZfjcR75sjdYRzc/QSxVbJeEzg1Xd3",
	"dNRT3+481v3v9UDmYtUE5IHrqA0x43CPYmz4tbnfwjJjnRLk9gasqoBh1KrwL4yidlvVr2kyT58c25kz",
	"eMFw2E7S/xbhFO/onvSbwCRNrRhg3e99SThpb84Y1a7Mg6ZkkFP2ps7b8DebJI9QxF0PfSFvNuLNfO70",
	"HifAdtQBHHsQoT6WsgvQGx+oTQrKXGxJzSy6mHVZaf1WzaFDV29wexEu16vXsPjmsi8vy6cr2wSU1utt",
	"F+BqPxUSLpkofdSGD+vzmqv91b2eHaQ/966/G96DU31Za22vbfnMvRRil+lMB29+tkGgBLiWu9+Bpbmz",
	"6Z2372JFmhsv3zkZMGoW02PvyuPq+byLy2QjsqG87jc/k2PvAht173hCjlWFEpl7byqa0/7WvXbgmxkh",
	"efS0P7lOR0UxPHVPInt3ctvwptP3VcQy53PIOPjen1/7YmBo6YioVEHWNYetjr8N1EnavQIC2wKwJG+Q",
	"f91f5GMsQblcTFSqkxyoggEMh8XlXNuRSD7bvjXtx9UEiL/Z2F8Zt66Gi8yzEIrV79DEHnMcGRl9hu8x",
	"Bo7N7lg+LPESUi1kI9xKAtykzq+ZLHgo+GuF3B57ThVA7ul/oBrudBLylmg+pTtetK7kg84/9AxHavPb",
	"NhFm7zozc0hKmPohzA9Lmqv4s1y9MbmtAi1BXE2kHnV8YSfZiPLmbjnTIFSDZcOIjCcs2Bj1f09k2vD7",
	"+0Vn53mqYa2iUx8iqHFiXxGa3SDOpQr2RskQ92sF3L0hvYyhZn/y1nIJqWaXe+px/G0NPKj1MPUGa4Rl",
	"GZTnYFUyENY9vbk7pgZoqFzGIDzBSwZ3BqcvlfUCdo8UaVBD9FmjqRfub1PyEjGAt5YRPAqhYsGU1sPm",
	"4tuYqigDseCDl213qIuH974nGcg5t5zLk2RT4hmY8lLETPSj5jJdb1SwDPNa+kp2dF9067d4HOMDeqp6",
	"69mXzAzNl+Sk+7DAlSu5idVTKqeyL74Jyv/mSyXZWXJ2AeGLl+jCx0oPrkXUJu3N3cmAnNRJUvevkbWB",
	"XlYzszrVpJuWHClVjUFaaS6MEpz0ZWU1szuqaLRHysawopiCT+UhXEuQ7mVgvBlyoSDRwkcADsExhAob",
	"qHsrJKje5yEscL1FWz/UVWnxwR1b04O6+NxwgUTChhroZFA7tn/OIWS/st99Hq4vHTbC9O7oNdlb/NUn",
	"GTHVQWJI9Uvibsv9+b23MW8zzkEm3iXfDn3kBpWhm7iQIitTV68mOBi1M2Gs3jTASqKW4bS7yo6RL8ei",
	"5W+DagkXsJtb+0u6pnwVVIELobeivV1DUGCttdv3avmPGznzlV3A6l7g/JLW8+mkECJPevzCJ916uO0z",
	"cMHSCyNml3V4fs+bkuQbdEdWgT9X652v/1oUwCF7PCPkiNuEKB8D1HzaqTU5f6SH5t/irFlpS1Q7w/7s",
	"nMczS7D2kLwjf/PDDHM1BYb53XEqO8ieaqvbnlq8kl5FXljthv2Njsppv3pZE5WFIial3LKi2Kjz3TXu",
	"R0g/ePZxWPsJCw7WwdbS+ohQWvKem7bw8lPt+hn3AKXvsAe80FgTPEHpuZED5wtHRP9UISVYSi8lNJa/",
	"z/7jFljzpWCLFCZ3mmXaOsk2mq65L4FxT72qbGZxPHdNa1hdUHAsTdw1ySn0GdpqsQHhmHMpL2n+8GY1",
	"LDt5hPhw76jHFxrqvyGSLSrV7cIS39JRcwe67v1Nzd+jGfBvYPYo6ux1QznnT/X0p3eRYSV+mpNc1E8A",
	"45DkCse03uGn35GFS/YrJKRMsVYe9JV/fKVS9/Atsvp5/WH9ct86fxb6DmTsFARRkHf1Qw5a4P1QQ1gf",
	"0S/MVHpObpTKY9TXIYsI/mI8Kqy6s+e6uGi4je3DOK2wTSHhnt3HQbzaDd3H3XpCY5dnXaTm0ikVdNc5",
	"+rZu4DZyUddrGxv70EXuULX/MSEL8Uc8THeMmbAIwRdwCIJKfn36K5GwxCcuBXnyBCd48mTqmv76rPnZ",
	"HOcnT6Ji3INFS1gcuTHcvFGKcc60TsYObAsme2oTfnDM3V3Y6L4j2AHiRURziD5ag1P78NYHrliNMvde",
	"A79dmmu8j58FKPNLriaK4f7nvhQLm0bQk83TOgsly7N9h7KRm1U/9YvZR7+4vOEv8tjwL9aW3WWT7pnG",
	"m8TItQ8AIiay1sbkwVRB1tWIhCvXLZJehcSVlpLpHZYz86ZP9ks0pubHylvivMBVARwnd2hxAVVBvNq3",
	"Uiov2fwoaI6ygNFnMEJRC5HPyOst3RQ5OCb1p0eLP8DzP77IDp4//cPijwffHqTw4tuXBwf05Qv69OXz",
	"p/Dsj9++OICny+9eLp5lz148W7x49uK7b1+mz188Xbz47uUfHpk7wIBsAZ344hmT/40vcidH70+SMwNs",
	"jRNasDews092GjL2j4HSFLkgbCjLJ4f+p//pudssFZt6eP/rxOXmT9ZaF+pwPr+6upqFXeYrNKYmWpTp",
	"eu7n6bwWevT+pMpis7FQuKM2QcmQAm6qI4Uj/Pbh9ekZOXp/MqsJZnI4OZgdzJ5iyeUCOC3Y5HDyHH/C",
	"07PGfZ/7WseHn6+nk/kaaI4+cfPHBrRkqf+kruhqBXLmXkU1P10+m3sxbv7ZGZKvh77NwweG5p8b9vZs",
	"T08MdJl/9rW2hls3ilk5P0PQYSQUQ83mC0yUHtsUVNC4fymo3Kn5Z1RPen+fu+zR+EdUE+0ZmHunVLxl",
	"A0uf9dbA2uqRUp2uy2L+Gf+DNBmAZYOgu+DaMLA51szYdX/ecZekkUPMjfVXrsDf3DY7c8fTOhCwOggn",
	"mW98uuOpl7l9OC2S97ODAzv9C/zP/bz02wzsjbz3e1rBiwWW0M+BMDx9OBhOOPqBDVcglutdTyffPiQW",
	"Tri5oGlOsKWd/vkDbgLIS5YCOYNNISSVLN+Rv/IqpzKo8BWjwAsurriH3FyZ5WZD5Q7VgI24BFW93V8T",
	"J5FgLn/3jL8Um4CGkWfTlUKTpWSXVMPkEwoaOnbnettTdw5vd6uHbZ6HH/eehtu+Wz/gvxoF5x6Hsx1+",
	"zDPf1TParShjO9Wj2NZMvrKAryzgHlmALiXvPaLBzYVBGFC4Kj0pTdcQ5wTdGzK4VSdFNH/rdIBNuOzv",
	"Pi5x2uQSQcn+w4/jXicF/44Zlea/irkyxiiBG/GyFpBlxYv8acdQt2CXhwoxXn/6Xdzpryj3J7mx19bf",
	"R2XOQFb7T3k3If/r+f+3Of+2sgi1+zolGvJchadeCzz11gLlouq4deXt5QCdh5+jEoLlQBjybcPVu69q",
	"xSSDdiimuquEMC6wox0A2rWNdJXgoZU99Nn/nmbEV6P5XRziFwcvHg6C5kuEb2BH3glNfvBi1RdmKHe4",
	"wPcdn/YZbbzKzlcov/ubuXnUjrKsQ/T2/gOlvxfZbgBjG7UqXPWAGmm19ZNxs4SuqbeDqrM1RGKpbcSf",
	"j+zgIoPOxXx9r1qDAeEkojZgSAG+q7z0dbUDUKOBwe3IDzvyGI3hfWvw6nnHcrFhypudv/KUrzzl30dI",
	"OcqyaDZF8+jv5XHTyTZJRQYr4IljYMlCZDv/8kJjgguwjo6OIDP/3HwB0ho9ey2Ax/g7oWSFklZ3EYsd",
	"OTnuSDi2W5vzfr/Dpi0dJ6KntEEcVFnavCmupQySvVnISugq5ccu6isj+sqI7iTcjD48Y+SbuH3S6T/t",
	"O3vqiyTGCjdT3QVljI7yRY/vvWx8V/+J6Ts2KwUyEnywab1tNH9lEV9ZxN1YxI8QOYx4ah3TiBDdzfSh",
	"sQwDA/Kz9jvrGKjkm5c5lWh2G2fmOMIRnXHjIbjGQyt1UVxllSlyy2wscmQD71fP+8ryvrK8fx2Wd7Sf",
	"0TQFkztrRhew29Ci0ofUutSZuApiZxAWm0fQDaFwb763/p5fUaaTpZAuxxkf8ep21kDzuav02vq1rlrW",
	"+YKl2IIfg+iQ+K/z6gGD6Md22E3sqws78Y3quLowTg15dxWh9vGT4bv4xI5j63XY1eF8jomBa6H0fHI9",
	"/dwKyQo/fqr2+HN1Gbi9vv50/f8DAAD//4Ix3g3n2gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
