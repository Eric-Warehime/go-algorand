// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a RoundStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetRoundStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRoundStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b8LfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
