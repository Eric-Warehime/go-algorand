// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
