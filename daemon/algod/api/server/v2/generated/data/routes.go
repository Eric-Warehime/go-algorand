// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"v/vw/wIAAP//Nz6UVifiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
