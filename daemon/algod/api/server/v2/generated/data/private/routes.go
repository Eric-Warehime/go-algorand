// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a RoundDeltas object for a given round
	// (GET /v2/deltas/{round})
	GetRoundDeltas(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRoundDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundDeltas(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundDeltas(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundDeltas, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
