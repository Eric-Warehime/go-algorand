// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a RoundStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetRoundStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRoundStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
