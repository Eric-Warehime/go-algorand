// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"

	"github.com/algorand/oapi-codegen/pkg/runtime"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundDeltas object for a given round
	// (GET /v2/deltas/{round})
	GetRoundDeltas(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// GetRoundDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundDeltas(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundDeltas(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundDeltas, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
