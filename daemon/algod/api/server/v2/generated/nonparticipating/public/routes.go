// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
