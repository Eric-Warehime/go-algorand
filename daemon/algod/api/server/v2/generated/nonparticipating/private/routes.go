// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xDlzoZzuwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
