// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctrLgX0HNvVV+7FAjP0+sqtRdxU5ytHEcl6Xk7L22N8GQPTM4IgEGAEcz8eq/",
	"b6EBkCAJznAkxT6pvZ9sDfFoNBqNfqH70yQVRSk4cK0mJ58mJZW0AA0S/6JpKiquE5aZvzJQqWSlZoJP",
	"Tvw3orRkfDmZTpj5taR6NZlOOC2gaWP6TycSfq+YhGxyomUF04lKV1BQM7DelqZ1PdImWYrEDXFqhzh7",
	"Nbne8YFmmQSl+lD+xPMtYTzNqwyIlpQrmppPilwxvSJ6xRRxnQnjRHAgYkH0qtWYLBjkmTryi/y9ArkN",
	"VukmH17SdQNiIkUOfThfimLOOHiooAaq3hCiBclggY1WVBMzg4HVN9SCKKAyXZGFkHtAtUCE8AKvisnJ",
	"+4kCnoHE3UqBrfG/CwnwBySayiXoycdpbHELDTLRrIgs7cxhX4Kqcq0ItsU1LtkaODG9jsiPldJkDoRy",
	"8u67l+TJkycvzEIKqjVkjsgGV9XMHq7Jdp+cTDKqwX/u0xrNl0JSniV1+3ffvcT5z90Cx7aiSkH8sJya",
	"L+Ts1dACfMcICTGuYYn70KJ+0yNyKJqf57AQEkbuiW18p5sSzv9FdyWlOl2VgnEd2ReCX4n9HOVhQfdd",
	"PKwGoNW+NJiSZtD3x8mLj58eTR8dX//b+9Pkv9yfz55cj1z+y3rcPRiINkwrKYGn22QpgeJpWVHex8c7",
	"Rw9qJao8Iyu6xs2nBbJ615eYvpZ1rmleGTphqRSn+VIoQh0ZZbCgVa6Jn5hUPDdsyozmqJ0wRUop1iyD",
	"bGq479WKpSuSUmWHwHbkiuW5ocFKQTZEa/HV7ThM1yFKDFw3wgcu6F8XGc269mACNsgNkjQXChIt9lxP",
	"/sahPCPhhdLcVeqwy4pcrIDg5OaDvWwRd9zQdJ5vicZ9zQhVhBJ/NU0JW5CtqMgVbk7OLrG/W43BWkEM",
	"0nBzWveoObxD6OshI4K8uRA5UI7I8+eujzK+YMtKgiJXK9Ard+dJUKXgCoiY/xNSbbb9f53/9IYISX4E",
	"pegS3tL0kgBPRQbZETlbEC50QBqOlhCHpufQOhxcsUv+n0oYmijUsqTpZfxGz1nBIqv6kW5YURWEV8Uc",
	"pNlSf4VoQSToSvIhgOyIe0ixoJv+pBey4inufzNtS5Yz1MZUmdMtIqygm6+Ppw4cRWiekxJ4xviS6A0f",
	"lOPM3PvBS6SoeDZCzNFmT4OLVZWQsgWDjNSj7IDETbMPHsYPg6cRvgJw/CCD4NSz7AGHwyZCM+Z0my+k",
	"pEsISOaI/OyYG37V4hJ4TehkvsVPpYQ1E5WqOw3AiFPvlsC50JCUEhYsQmPnDh2Gwdg2jgMXTgZKBdeU",
	"ccgMc0aghQbLrAZhCibcre/0b/E5VfD86dAd33wdufsL0d31nTs+arexUWKPZOTqNF/dgY1LVq3+I/TD",
	"cG7Flon9ubeRbHlhbpsFy/Em+qfZP4+GSiETaCHC302KLTnVlYSTD/yh+Ysk5FxTnlGZmV8K+9OPVa7Z",
	"OVuan3L702uxZOk5Ww4gs4Y1qnBht8L+Y8aLs2O9ieoVr4W4rMpwQWlLcZ1vydmroU22Yx5KmKe1thsq",
	"Hhcbr4wc2kNv6o0cAHIQdyU1DS9hK8FAS9MF/rNZID3RhfzD/FOWuemty0UMtYaO3ZWM5gNnVjgty5yl",
	"1CDxnftsvhomAFaRoE2LGV6oJ58CEEspSpCa2UFpWSa5SGmeKE01jvTvEhaTk8m/zRr7y8x2V7Ng8tem",
	"1zl2MiKrFYMSWpYHjPHWiD5qB7MwDBo/IZuwbA+FJsbtJhpSYoYF57CmXB81KkuLH9QH+L2bqcG3lXYs",
	"vjsq2CDCiW04B2UlYNvwniIB6gmilSBaUSBd5mJe/3D/tCwbDOL307K0+EDpERgKZrBhSqsHuHzanKRw",
	"nrNXR+T7cGwUxQXPt+ZysKKGuRsW7tZyt1htW3JraEa8pwhup5BHZms8GoyYfxcUh2rFSuRG6tlLK6bx",
	"313bkMzM76M6/zVILMTtMHGhouUwZ3Uc/CVQbu53KKdPOM7cc0ROu31vRjZmlDjB3IhWdu6nHXcHHmsU",
	"XklaWgDdF3uXMo5Kmm1kYb0lNx3J6KIwB2c4oDWE6sZnbe95iEKCpNCB4ZtcpJd/p2p1B2d+7sfqHz+c",
	"hqyAZiDJiqrV0SQmZYTHqxltzBEzDVHBJ/NgqqN6iXe1vD1Ly6imwdIcvHGxxKIe+yHTAxnRXX7C/9Cc",
	"mM/mbBvWb4c9IhfIwJQ9zs7JkBlt3yoIdibTAK0QghRWwSdG6z4IypfN5PF9GrVH31qbgtshtwjcIbG5",
	"82PwjdjEYPhGbHpHQGxA3QV9mHFQjNRQqBHwvXKQCdx/hz4qJd32kYxjj0GyWaARXRWeBh7e+GaWxjh7",
	"OhfyZtynw1Y4aUzOhJpRA+Y77SAJm1Zl4kgxYrayDToDNV6+3UyjO3wMYy0snGv6J2BBmVHvAgvtge4a",
	"C6IoWQ53QPqrKNOfUwVPHpPzv58+e/T418fPnhuSLKVYSlqQ+VaDIvedbkaU3ubwoL8y1I6qXMdHf/7U",
	"Gyrb48bGUaKSKRS07A9lDaBWBLLNiGnXx1obzbjqGsAxh/MCDCe3aCfWtm9Ae8WUkbCK+Z1sxhDCsmaW",
	"jDhIMthLTIcur5lmGy5RbmV1F6osSClkxL6GR0yLVOTJGqRiIuJNeetaENfCi7dl93cLLbmiipi50fRb",
	"cRQoIpSlN3w837dDX2x4g5udnN+uN7I6N++YfWkj31sSFSlBJnrDSQbzatnShBZSFISSDDviHf09aBQF",
	"LlgB55oW5U+Lxd2oigIHiqhsrABlZiK2hZHrFaSC20iIPdqZG3UMerqI8SY6PQyAw8j5lqdoZ7yLYzus",
	"uBaMo9NDbXkaaLEGxhyyZYssb6+tDqHDTnVPRcAx6HiNn9HQ8QpyTb8T8qKxBH4vRVXeuZDXnXPscqhb",
	"jDOlZKav16EZX+bt6Julgf0otsYvsqCX/vi6NSD0SJGv2XKlA7XirRRicfcwxmaJAYofrFKWmz591eyN",
	"yAwz0ZW6AxGsGazhcIZuQ75G56LShBIuMsDNr1RcOBuI10BHMfq3dSjv6ZXVs+ZgqCullVltVRL03vbu",
	"i6ZjQlN7QhNEjRrwXdVOR9vKTmdjAXIJNNuSOQAnYu4cRM51hYuk6HrWXrxxomGEX7TgKqVIQSnIEmeY",
	"2guab2evDr0DTwg4AlzPQpQgCypvDezlei+cl7BNMFBCkfs//KIefAF4tdA034NYbBNDb63mOy9gH+px",
	"0+8iuO7kIdlRCcTfK0QLlGZz0DCEwoNwMrh/XYh6u3h7tKxBoj/uT6V4P8ntCKgG9U+m99tCW5UD4X9O",
	"vTUSntkwTrnwglVssJwqnexjy6ZRSwc3Kwg4YYwT48ADgtdrqrT1ITOeoenLXic4jxXCzBTDAA+qIWbk",
	"X7wG0h87NfcgV5Wq1RFVlaWQGrLYGjhsdsz1Bjb1XGIRjF3rPFqQSsG+kYewFIzvkGVXYhFEde1qcUEW",
	"/cWhQ8Lc89soKltANIjYBci5bxVgNwyBGgCEqQbRlnCY6lBOHXc1nSgtytJwC51UvO43hKZz2/pU/9y0",
	"7RMX1c29nQlQGHnl2jvIryxmbfDbiiri4CAFvTSyB5pBrLO7D7M5jIliPIVkF+WjimdahUdg7yGtyqWk",
	"GSQZ5HTbH/Rn+5nYz7sGwB1v1F2hIbFRTPFNbyjZB43sGFrgeComPBL8QlJzBI0q0BCI671n5Axw7Bhz",
	"cnR0rx4K54pukR8Pl223OjIi3oZroc2OO3pAkB1HHwPwAB7qoW+OCuycNLpnd4r/BOUmqOWIwyfZghpa",
	"QjP+QQsYsKG6APHgvHTYe4cDR9nmIBvbw0eGjuyAQfctlZqlrERd5wfY3rnq150g6mYkGWjKcshI8MGq",
	"gWXYn9j4m+6YN1MFR9ne+uD3jG+R5eRMocjTBv4Stqhzv7WBnYGp4y502cio5n6inCCgPlzMiOBhE9jQ",
	"VOdbI6jpFWzJFUggqpoXTGsbsN1WdbUok3CAqF9jx4zOiWeDIv0OjPEqnuNQwfL6WzGdWJ1gN3wXHcWg",
	"hQ6nC5RC5CMsZD1kRCEYFe9BSmF2nbnYcR897CmpBaRj2ujBra//e6qFZlwB+U9RkZRyVLkqDbVMIyQK",
	"CihAmhmMCFbP6SI7GgxBDgVYTRK/PHzYXfjDh27PmSILuPIPLkzDLjoePkQ7zluhdOtw3YE91By3s8j1",
	"gQ4fc/E5LaTLU/ZHFriRx+zk287gtZfInCmlHOGa5d+aAXRO5mbM2kMaGRdVgeOO8uUEQ8fWjft+zooq",
	"p/ouvFawpnki1iAly2AvJ3cTM8G/XdP8p7rbHp2uiQJjRQEZoxryLSklpGCj842opuqxj4iN20tXlC9R",
	"QpeiWrrAMTsOcthKWVuIrHhviKgUozc8QatyjOO6YGH/QMPIL0CNDtU1SVuN4YrW87k3OWOuQr9zERN9",
	"1Cs1nQyqmAap60bFtMhpvzIZwX1bAlaAn2bikb4LRJ0RNvr4CrfFUK/Z3D/HRt4MHYOyP3EQytZ8HIpm",
	"M/ptvr0DKcMORCSUEhTeCaFdSNmvYhG+KHOXhtoqDUXfdG67/jpw/N4NKmiC54xDUggO2+gjasbhR/wY",
	"PU54Lw10RglhqG9X6G/B3wGrPc8YarwtfnG3uyc04me7uQtyFK8Y4dkbI0lHHXF5HnHFueci3fOrpvXz",
	"dCYJVUqkDGWcs0xN7Tlx3jv3tqSNvbd1EOwdHJ3uuB2fU/gSEW2qkJeEkjRnaHEVXGlZpfoDp2jTCZYa",
	"CRbyyuuwle+lbxI3K0asfm6oD5xioFht6YkGOCwgYtb4DsAb+1S1XILSHd1gAfCBu1aMk4ozjXMVhtoT",
	"S+4lSIzYObItC7olC0MTWpA/QAoyr3RbWsbXUEqzPHcOMDMNEYsPnGqSg1H4f2T8YoPDeSe5P3Ec9JWQ",
	"lzUW4pfzEjgoppJ4UNP39ivGm7rlr1zsKb5et5+ty8SM3zyZ2qLJp3mR/X/u/8fJ+9Pkv2jyx3Hy4n/M",
	"Pn56ev3gYe/Hx9dff/1/2z89uf76wX/8e2ynPOyxtzoO8rNXTpM8e4XqQuMz6cH+2ezlBeNJlMjC6IcO",
	"bZH7+C7VEdCDtjFJr+AD1xtuCGlNc5YZ3nITcuheEL2zaE9Hh2paG9ExHvm1HiiE34LLkAiT6bDGGwtB",
	"/TjA+Ks4dOK5h254XhYVt1vphWf76MPHY4nFtH75aJOinBB8FreiPpjQ/fn42fPJtHnOVn+fTCfu68cI",
	"JbNsE3u0mMEmplu5A4IH454iJd0q0HHugbBHQ89sLEQ4bAFGKVcrVn5+TqE0m8c5nA+ldzaaDT/jNsbd",
	"nB90CW6dp0EsPj/cWgJkUOpVLFlCS87CVs1uAnTCNEop1sCnhB3BUddGkhl1zwXB5UAX+GgflUcxRpmp",
	"z4ElNE8VAdbDhYwyRMToB0Uex62vpxN3+as712bcwDG4unPW/j//txbk3vffXpCZY5jqnn0/a4cOXjxG",
	"NGH3qKcVwGO4mU0RY4W8D/wDfwULxpn5fvKBZ1TT2ZwqlqpZpUB+Q3PKUzhaCnLi3wm9opp+4D1JazCL",
	"U/BCi5TVPGcpuQz1iYY8bWaO/ggfPryn+VJ8+PCxF8vQl/7dVFH+YidIjCAsKp24vAKJhCsqY74iVb8r",
	"x5Ft4pBds1ohW1TWoOjzFrjx4zyPlqXqvi/tL78sc7P8gAyVez1ptowoLaSXRYyAYqHB/X0j3MUg6ZU3",
	"i1QKFPmtoOV7xvVHknyojo+fAGk9uPzNXfmGJrcljDaODL5/7dpEcOFWK4SNljQp6TLmkvrw4b0GWuLu",
	"o7xcoIkizwl2az309IHsOFSzAI+P4Q2wcBz8aA0Xd257+RxS8SXgJ9xCbGPEjcZRftP9Cp5+3ni7Os9H",
	"e7tU6VViznZ0VcqQuN+ZOrXM0ghZPnpBsSVqqy4LzxxIuoL00qVHgaLU22mruw+QcYKmZx1M2cQ59uEW",
	"pm5Ag/4cSFVm1InilG+7b+gVaO3DcN/BJWwvRJP54ZBH8+033GrooCKlBtKlIdbw2LoxupvvorBQsS9L",
	"/xQa38R5sjip6cL3GT7IVuS9g0McI4rWG+MhRFAZQYQl/gEU3GChZrxbkX5seUbLmNubL5JEx/N+4po0",
	"ypMLmApXg0Zz+70AzMIlrhSZUyO3C5dAyr5TDrhYpegSBiTk0Kcy8jVwyw+Dg+y796I3nVh0L7TefRMF",
	"2TZOzJqjlALmiyEVVGY6YXJ+Juu2c44FzAvpEDbPUUyq4wkt06Gy5duyie6GQIsTMEjeCBwejDZGQslm",
	"RZXPbYUpwPxZHiUD/Inv7ndlWzkLIryCPF91LhXPc7vntKddupwrPtGKz64SqpYjMqUYCR+DymPbITgK",
	"QBnksLQLt409oTQ5AJoNMnD8tFjkjANJYsFigRk0uGbcHGDk44eEWAM6GT1CjIwDsNEdjQOTNyI8m3x5",
	"CJDc5TCgfmx0ZAd/Q/y5lQ2fNiKPKA0LZwNOqdRzAOoiDOv7qxPnisMQxqfEsLk1zQ2bcxpfM0gv6QeK",
	"rZ0UHy4g4sGQOLvDf2EvloPWZK+im6wmlJk80HGBbgfEc7FJ7HvLqMQ738wNvUcjyvH1Z+xg2vQq9xSZ",
	"iw0G2eDVYiOY98AyDIcHI9DwN0whvWK/odvcArNr2t3SVIwKFZKMM+fV5DIkToyZekCCGSKX+0HGlBsB",
	"0DF2NOmHnfK7V0ltiyf9y7y51aZNJjD/WCd2/IeOUHSXBvDXt8LUOU7ediWWqJ2iHSvSTu8SiJAxojds",
	"ou+k6buCFOSASkHSEqKSy5jj0+g2gDfOue8WGC8wiQzl2wdBAJKEJVMaGiO6D3P4EuZJirnrhFgMr06X",
	"cmHW906I+pqybkTs2FrmZ18BRvAumFQ6QQ9EdAmm0XcKlervTNO4rNQOcbKZXlkW5w047SVsk4zlVZxe",
	"3bw/vDLTvqlZoqrmyG8Zt/Emc8xMHA183DG1jY3dueDXdsGv6Z2td9xpME3NxNKQS3uOv8i56HDeXewg",
	"QoAx4ujv2iBKdzDI4MFqnzsGclPg4z/aZX3tHabMj7036MY/mx26o+xI0bUEBoOdq2DoJjJiCdNBYt/+",
	"S9KBM0DLkmWbji3UjjqoMdODDB4+HVoHC7i7brA9GAjsnrHHLBJUO/NdI+DbFM2txDNHozBz0c5PFzKE",
	"cCqmfIGBPqLqx277cHUBNP8Btr+YtricyfV0cjvTaQzXbsQ9uH5bb28Uz+iat6a0lifkQJTTspRiTfPE",
	"GZiHSFOKtSNNbO7t0Z+Z1cXNmBffnr5+68C/nk7SHKhMalFhcFXYrvzLrMom2Rs4ID6BudH5vMxuRclg",
	"8+vMYKFR+moFLhN0II32UlY2DofgKDoj9SIeIbTX5Ox8I3aJO3wkUNYuksZ8Zz0kba8IXVOWe7uZh3Yg",
	"mgcXNy7vaZQrhAPc2rsSOMmSO2U3vdMdPx0Nde3hSeFcO3JVFzYduyKCd13oGLK8LZ3XvaCYcNJaRfrM",
	"iVcFWhISlbM0bmPlc2WIg1vfmWlMsPGAMGpGrNiAK5ZXLBjLNBuTUqYDZDBHFJkqmtWmwd1cuFI7FWe/",
	"V0BYBlybTxJPZeegYnYSZ23vX6dGdujP5Qa2Fvpm+NvIGGGy1e6Nh0DsFjBCT10P3Fe1yuwXWlukzA+B",
	"S+IAh384Y+9K3OGsd/ThqNkGL67aHrewMk6f/xnCsCnS95fl8cqry/o6MEe0zA5TyUKKPyCu56F6HHkn",
	"5NPLMoxy+QPCdwphcYkWi6mtO021oGb2we0ekm5CK1Q7SGGA6nHnA7cc5rn0FmrK7VbbqhetWLc4wYRR",
	"pTM7fkMwDuZeJG5Or+Y0lgTUCBkGptPGAdyypWtBfGePe1U/lrCzk8CXXLdl9g14CbJ5wtfPJ3NDgcFO",
	"O1pUaCQDpNpQJpha/1+uRGSYil9RbounmH72KLneCqzxy/S6EhIzOKi42T+DlBU0j0sOWdo38WZsyWxd",
	"kEpBUHjCDWRrLlkqcsU76idADjVnC3I8DarfuN3I2JopNs8BWzyyLeZUISevDVF1F7M84HqlsPnjEc1X",
	"Fc8kZHqlLGKVILVQh+pN7byag74C4OQY2z16Qe6j206xNTwwWHT38+Tk0Qs0uto/jmMXgKvrsoubZMhO",
	"/uHYSZyO0W9pxzCM2416FH3sbgu7DTOuHafJdh1zlrCl43X7z1JBOV1CPFKk2AOT7Yu7iYa0Dl54ZqsS",
	"KS3FljAdnx80NfxpIPrcsD8LBklFUTBdOOeOEoWhp6aqhJ3UD2dLHLmEwB4u/xF9pKV3EXWUyM9rNLX3",
	"W2zV6Ml+Qwtoo3VKqE3bkbMmesGnKSdnPisQZkiuEyNb3Ji5zNJRzMFghgUpJeMaFYtKL5KvSLqikqaG",
	"/R0NgZvMnz+NZIVuZyflhwH+2fEuQYFcx1EvB8jeyxCuL7nPBU8Kw1GyB81rj+BUDjpz4267Id/h7qHH",
	"CmVmlGSQ3KoWudGAU9+K8PiOAW9JivV6DqLHg1f22SmzknHyoJXZoZ/fvXZSRiFkLNVfc9ydxCFBSwZr",
	"jN2Lb5IZ85Z7IfNRu3Ab6L+s58GLnIFY5s9yTBH4RkS0U5+pvLaku1j1iHVg6JiaD4YM5m6oKWlnhf78",
	"fPRuoqDini5v2O47tswXjwf8o4uIL0wuuIGNL9+uZIBQgqz4UZLJ6u+Bj52Sb8RmLOF0TqEnnn8BFEVR",
	"UrE8+6V5+dkpOiApT1dRn9ncdPy1KY9WL87egdGsfSvKOeTR4ay8+auXSyOS8z/F2HkKxke27dZBsMvt",
	"LK4BvA2mB8pPaNDLdG4mCLHaflRXB23nS5ERnKdJEdcc1379jCDL+e8VKB17oIQfbOAY2kYNO7BJtgnw",
	"DDXSI/K9rYC8AtLK/4OaoE/00H41XZW5oNkUE1BcfHv6mthZbR9b5Mcm+V6iItReRccmFmS/HBeC7Ov1",
	"xJ9HjB9nd7y2WbXSSZ2TO/YA1bRosoazjp8AVaQQO0fkVVDL1L5VNUMYelgwWRitrh7NykdIE+Y/WtN0",
	"hWpfi7UOk/z47PSeKlVQEbKu7FSnhMRzZ+B2CeptfvopEUY3v2LKFr6FNbTfvNYPwJ3Zwb+BbS9PVpxb",
	"Sjk64JarE0AeinYPnL0ivSshClkH8QcK/ba4w6HJ+s+xVzRDVTfzf68UpH1BWVfs8QXNU8oFZynmh4pd",
	"0a5C7hg/24hUWl1Drj/i7oRGDle03kAdiuewOFiBwDNCh7i+oT/4ajbVUof9U2Mp1hXVZAlaOc4G2dSX",
	"zXC2RsYVuBSfWE854JNCtnyXyCGj7vCkdpscSEb49GZAefzOfHvjTAsYk37JOCoRDm1O8LPWQCzgqY3m",
	"wTRZClBuPe33x+q96XOET3Ez2Hw88gU/cQzr+jPLtn7u/lCn3uvtvMym7UvT1uU3qn9uRTnbSU/L0k06",
	"XFQlKg/oDR9EcMR7mXj3UYDcevxwtB3ktjNcBe9TQ2iwRmc3lHgP9wijLjDSKV5lhFZLUdiC2DCxaJYE",
	"xiNgvGYcmnK0kQsijV4JuDF4Xgf6qVRSbUXAUTztAmiOHu4YQ1PauTduO1Q3u5NBCa7RzzG8jU1tlAHG",
	"UTdoBDfKt3UVXEPdgTDxEstvO0T2K52gVOWEqAxfLXRqn8QYh2HcvrpS+wLoH4O+TGS7a0ntyTnkJhp6",
	"iDqvsiXohGZZLOPqN/iV4FeSVSg5wAbSqs7MWZYkxbwr7UQ0fWpzE6WCq6rYMZdvcMvpgmJCEWoICxr5",
	"HcaHLvMt/htLSzm8My7Q4+BQQx/V4epwHCg3t0fqSb2GphPFlsl4TOCdcnt0NFPfjNCb/ndK6blYtgH5",
	"zOkndnG5cI9i/O1bc3GE2Rl6uVbt1VInT8DAPuFLQKLaWD/7bXMlvMp6yVfRoVSXmNttgBguFjfFy28g",
	"vDdIukHt/Wo9lENBvulgTDrV7nWcpmQnCxp8cWQjhOzbIoQibp0digqyQUHmc6/3OMmwJ2freN7CAKE+",
	"3KwP0A8+lpWUlDn3e8Ms+ph1Ue/9dwhj4mGbDe4uwsWSD1rsflgPxX37ZGz4vVtM6hLck/lSwpqJyju2",
	"feSTVwntr63STHXkfXT9fcMrTvVlzaGDxtsLl9TfLtPp5D/8YuPkCHAtt/8CptzepvfKVPWlXWueapqQ",
	"Oh/0qPzQrVtxTALCWE48Jxu2CmXtKfPVZ6xjxIF+2a7phGUHXZjdqwSHsaPEjl28CNdw2qkm1RQesVIo",
	"1qRlj1XnGhlieIEFtoK0Wf2xfHzPGlKNufibuAUJcEgSLTNZUO/zv9NPDajTdSSmyzq1K9VUPwH/nju+",
	"9xoseNFok5cfjU+sdFpHpyGfxmTGS+Cu5Gb7ncfoaPPFAlLN1nte3/1jBTx42TX1dhlbOjt4jMfq6GVM",
	"3nK41bEBaNfjuJ3wBEkUbw3O0NubS9jeU6RFDdFs6lN/1d4kbwdiALlDYkhEqFj0hzUkO4c8UzVlIBZ8",
	"tJXtDk0GtMFCTMFb0hvO5UnSXBzN+9IdU8YrwYyay3Q96NU1BuIOPdDrF5IY1j9eYd0OVRdJ9Hk/Qi2d",
	"nPWzI165vCH4VrL2nfgMIqD8b/5htJ0lZ5cQlopCT9UVlZlvETW9eKtOsuM+6r2q80UQukAv6plZExvb",
	"f0cVybeFEdBpLowYkQyFkbfDUetYjnvKBt3Y7O0YaGvgWoB0JfVQ/s2FgkQLH0u7C45dqLCRRTdCghrM",
	"cWmBG8w8865JrYO5filmmqEuoChcIJFQUAOdDBLgDM+5C9kv7Xf/cMjnet1rYarpdX/NAB8VzVQPiSHV",
	"L4i7Lfc/SLqJsYlxbss2q1g2HA6y7Q0ppciq1F7Q4cGoDXKjc03tYCVRO03aX2VHRwhedV7CdmaVIF9s",
	"we9gCLSVnCzoQRaFzibfqflNxeBe3gl4X9JyNZ2UQuTJgLPjrJ/Cp0vxlyy9hIyYm8JHDw4UriH30cZe",
	"e7OvVlufsqYsgUP24IiQU27jtb1ju51DujM5v6d3zb/BWbPKZtVyRrWjDzwe+Ir5ruQtuZkfZjcPU2BY",
	"3S2nsoPsSRCzGUgfJOlVpIzT0VitvO9q7pbWaYjKQhGTSZqqMXviZOoQmaZwRxMm05cO8lxcJUhFSZ3/",
	"K6ZzmHZtJukznjbdDLbnEMTbUOUu0C1Z0YykQkpIwx7xJw4WqEJISHKB4Tcxz+BCG3mowLhmTnKxJKI0",
	"aq5No+d9KNGqMsFc9pmt7ZlYR81AIgNQ7lmtm8Y27s+zo/jM4YVtLlYRewsi2mP54Oo1jlBGVKPoVkGq",
	"wRxBoPttTaex4jztdXXLOw0VW9OiYGkc3X+tKJPB2JA9pYci66vJ0VVG8q8CB3AVddnu9pDaMnLzsX7S",
	"OmfyyGMRADDsOW3BMMp/eigYCyzLmNAIks9qqXXaqprLOmff57OzNJ5Sq7WugJixKwnulZqtH9cpfFNS",
	"vfK3mGne1y2NngIKn5DZ8h9UWUuIt8i44nVd8UCUSQ5raDmU3dO5Kk1BKbaGsPCd7UwygBLtk12pOeYp",
	"DblcR5Rya08CX9sY7EZlK4tYu1Nkj+AUFfM2PLHHRI09SgaiNcsq2sKfukUpsaEqYhE27GEdySkOZhLx",
	"xe1iEXtjG5Dmo+eSx0MbwpebtVEEZ8tq46klwuZkq5Je8WElImJ3qv3tt18HwcGI6rykHrzyZb0rN1Ug",
	"ByljF2H0yv9FZQ4FvnxrmPTEi1uub0TGsqYupiIDMNWcZ4zegyY6LGhW0C3J2GIB0hrzlaY8ozILmzNO",
	"UpCaMqPZbNXNxVoDraxguleyNdwVB/UMJibjol3KApJvncpwC6kTPTcRidNetVoMVTjs7Ur8OQHdGOka",
	"46oGiMA9hEbZ2h4wwVFAIgW9hAPnUewP2D0Npidxtj8tcNYxU8R8rTfMrTaKdffDECK3W1DLcLdnKEy9",
	"2LzpkjaaBS3J/oLs0viPzcU5rqqi77AHvNBhGNRV9LYbB84Xfhz1Y42UYCkfhyihtfx9Pki3wEbSCLbI",
	"MQKtwSbCtQH17X0JHMzqZe23HSoB2nXvYp5FwW2Rv55b2PImW7UvIBxzFuSa5p/ftYsJOE8RH5C9GzYG",
	"h77BEMkWlepmLxNe01FzB37Au5uav0VX9D/A7FFUK3VDORGmFut9MA/eLDS3houFL+G1Bk6ucEwbx/bo",
	"OZm7l9ulhJSprmh05atr1K4wLDblXoNs9B7f2751/iL0Lch44TUN8qbJ1I86/pI3EDZH9AszlYGTG6Xy",
	"GPX1yCKCvxiPClOo7bkuLlsBbrbySeflhpBwx4FuQcj6gYFu/eRwY5dng7nMpVMp6K9z9G3dwm3kom7W",
	"NjZKs4/cXencxwRXxqs0mO4Y3WkRgiVOCIJKfnv0G5GwwBqGgjx8iBM8fDh1TX973P5sjvPDh1Hp7LPF",
	"dVocuTHcvDGK+WXopZ99zTbwqLSzHxXLs32E0Xoi3FQBxUewv7pEBF+kDumvNtakf1RdLbhbBMhZxETW",
	"2po8mCp4/Dvi3a/rFnnli36ctJJMbzE/orcfsF+jEajf19FMLhqu1g/d3afFJdQZNpvYp0r52/V7QXO8",
	"j6zays0tJPIj8u2GFmUO7qB8fW/+N3jy1dPs+Mmjv82/On52nMLTZy+Oj+mLp/TRiyeP4PFXz54ew6PF",
	"8xfzx9njp4/nTx8/ff7sRfrk6aP50+cv/nbP8CEDsgV04rPxTP43FutNTt+eJRcG2AYntGQ/gCv2bMjY",
	"VxykKZ5EKCjLJyf+p//pT9hRKopmeP/rxCX7mKy0LtXJbHZ1dXUUdpktMdgh0aJKVzM/T68k4enbs9pL",
	"ZK1AuKP2nay37nlSOMVv7749vyCnb8+OgnLzJ5Pjo+OjR1idvAROSzY5mTzBn/D0rHDfZ47YJiefrqeT",
	"2QpojrGB5o8CtGSp/ySBZlv3f3VFl0uQR64Mo/lp/XjmxYrZJxf0cb3r2yysaDL71IqNyfb0xIoHs08+",
	"kd/u1q1MeS4mKOgwEopdzWZzzA8ytimooPHwUlDZULNPKC4P/j5zCQ3iH1Ftsedh5gPI4i1bWPqkNwbW",
	"To+U6nRVlbNP+B+kz2sXYgyxcDGbB4CSpvmUME3oXEjMoKfTleERPnUXU0HLCVKtJfizzBC66fXSQuCT",
	"dNqs5Sfv++4sHIj4kZArGJJvDm1rpoYvowUqSKRd3zqt9s3d8/44efHx06Ppo+PrfzN3i/vz2ZPrkX6p",
	"l/W45Ly+OEY2/Ih5r9AAiWf58fHxLSrCn/IA/XaT6oc8kaLudieGXQZuqzoDkRoZe/LzdIaPlZi9nk6e",
	"Hrjinbak1uOmSKnYb2hGvMsf5370+eY+4xh1a3g8sXfY9XTy7HOu/owbkqc5wZZBwsX+1v/ML7m44r6l",
	"ETiqoqBy64+xajEF4jYbrzW6VBiHIdmaopzHBW9VkZt8xNifWNjFAL9Rmt6A35ybXv/Nbz4Xv8FNugt+",
	"0x7ojvnN4wPP/F9/xf9/c9inx199Pgh81NgFK0BU+q/K4c8tu70Vh3cCp32RPtMbPkN32uxTS0B2n3sC",
	"cvv3pnvYYl2IDLwMLBYLm+t+1+fZJ/tvMBFsSpCsAG5zgLpf7Wu9GWag3PZ/3vI0+mN/Hd1Cs7GfZ5/a",
	"hY5aCFKrSmfiyqZdi16ZmM2f5i71L5qLa9VTC+IHaJ5GkZ/ca+58izZylgGhmGZKVLqxDZjOdZhK7b0x",
	"IzRFqJeM4wRohsdZbI5rGjw6UJAKbku2dq5nB9kbkUH/esYL+PcK5La5gR2Mk2mLPzsCj2SUvvV112en",
	"14eRP7oLrK+rTxx1ndbW37MryrS5xN0bJcRov7MGms9cQqLOr00OgN4XTGwQ/BjG2kR/ndVFGaIfu6p4",
	"7KtTRQcaede//9yY5UIzF5JEbeB6/9HsLKb8ddTSWG1OZjOM+18JpWeT6+mnjkUn/Pix3kyfp7He1OuP",
	"1/8vAAD//4yNC1QYzAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
