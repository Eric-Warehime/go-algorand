// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundDeltas object for a given round
	// (GET /v2/deltas/{round})
	GetRoundDeltas(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundDeltas(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundDeltas(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundDeltas, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
