// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVWOfcMZ+Su7VtXWO8V2sro4XpelZO+e5UswZM8MVhyAC4DSTHz6",
	"36/QAEiQBDkcSavsvspPtob4aDQajf7Gl0kqNoXgwLWaHH+ZFFTSDWiQ+BdNU1FynbDM/JWBSiUrNBN8",
	"cuy/EaUl46vJdMLMrwXV68l0wukG6jam/3Qi4R8lk5BNjrUsYTpR6Ro21Aysd4VpXY20TVYicUOc2CFO",
	"30xuBj7QLJOgVBfKv/J8RxhP8zIDoiXliqbmkyLXTK+JXjNFXGfCOBEciFgSvW40JksGeaZmfpH/KEHu",
	"glW6yfuXdFODmEiRQxfO12KzYBw8VFABVW0I0YJksMRGa6qJmcHA6htqQRRQma7JUsg9oFogQniBl5vJ",
	"8aeJAp6BxN1KgV3hf5cS4FdINJUr0JPP09jilhpkotkmsrRTh30Jqsy1ItgW17hiV8CJ6TUjP5RKkwUQ",
	"ysnHb1+T58+fvzIL2VCtIXNE1ruqevZwTbb75HiSUQ3+c5fWaL4SkvIsqdp//PY1zn/mFji2FVUK4ofl",
	"xHwhp2/6FuA7RkiIcQ0r3IcG9ZsekUNR/7yApZAwck9s43vdlHD+33RXUqrTdSEY15F9IfiV2M9RHhZ0",
	"H+JhFQCN9oXBlDSDfjpKXn3+8nT69OjmD59Okv9yf758fjNy+a+rcfdgINowLaUEnu6SlQSKp2VNeRcf",
	"Hx09qLUo84ys6RVuPt0gq3d9ielrWecVzUtDJyyV4iRfCUWoI6MMlrTMNfETk5Lnhk2Z0Ry1E6ZIIcUV",
	"yyCbGu57vWbpmqRU2SGwHblmeW5osFSQ9dFafHUDh+kmRImB61b4wAX96yKjXtceTMAWuUGS5kJBosWe",
	"68nfOJRnJLxQ6rtKHXZZkfM1EJzcfLCXLeKOG5rO8x3RuK8ZoYpQ4q+mKWFLshMlucbNydkl9nerMVjb",
	"EIM03JzGPWoObx/6OsiIIG8hRA6UI/L8ueuijC/ZqpSgyPUa9NrdeRJUIbgCIhZ/h1Sbbf9fZ399T4Qk",
	"P4BSdAUfaHpJgKci699jN2nsBv+7EmbDN2pV0PQyfl3nbMMiIP9At2xTbggvNwuQZr/8/aAFkaBLyfsA",
	"siPuobMN3XYnPZclT3Fz62kbgpohJaaKnO5m5HRJNnT756OpA0cRmuekAJ4xviJ6y3uFNDP3fvASKUqe",
	"jZBhtNmw4NZUBaRsySAj1SgDkLhp9sHD+GHw1JJVAI4fpBecapY94HDYRmjGHF3zhRR0BQHJzMiPjnPh",
	"Vy0ugVcMjix2+KmQcMVEqapOPTDi1MPiNRcakkLCkkVo7Myhw3AP28ax140TcFLBNWUcMsN5EWihwXKi",
	"XpiCCYeVme4VvaAKvn7Rd4HXX0fu/lK0d31wx0ftNjZK7JGM3IvmqzuwcbGp0X+E8hfOrdgqsT93NpKt",
	"zs1VsmQ5XjN/N/vn0VAqZAINRPiLR7EVp7qUcHzBn5i/SELONOUZlZn5ZWN/+qHMNTtjK/NTbn96J1Ys",
	"PWOrHmRWsEa1Key2sf+Y8eLsWG+jSsM7IS7LIlxQ2tBKFzty+qZvk+2YhxLmSaXKhlrF+dZrGof20Ntq",
	"I3uA7MVdQU3DS9hJMNDSdIn/bJdIT3QpfzX/FEVueutiGUOtoWN336JtwNkMTooiZyk1SPzoPpuvhgmA",
	"1RJo3WKOF+rxlwDEQooCpGZ2UFoUSS5SmidKU40j/YeE5eR48od5bVyZ2+5qHkz+zvQ6w05GHrUyTkKL",
	"4oAxPhi5Rg0wC8Og8ROyCcv2UCJi3G6iISVmWHAOV5TrWa2PNPhBdYA/uZlqfFtRxuK7pV/1IpzYhgtQ",
	"Vry1DR8pEqCeIFoJohWlzVUuFtUPX50URY1B/H5SFBYfKBoCQ6kLtkxp9RiXT+uTFM5z+mZGvgvHRjlb",
	"8HxnLgcrapi7YeluLXeLVYYjt4Z6xEeK4HYKOTNb49FgZPj7oDjUGdYiN1LPXloxjf/i2oZkZn4f1fnf",
	"g8RC3PYTF2pRDnNWgcFfAs3lqxbldAnH2XJm5KTd93ZkY0aJE8ytaGVwP+24A3isUHgtaWEBdF/sXco4",
	"amC2kYX1jtx0JKOLwhyc4YDWEKpbn7W95yEKCZJCC4ZvcpFe/oWq9T2c+YUfq3v8cBqyBpqBJGuq1rNJ",
	"TMoIj1c92pgjZhqi9k4WwVSzaon3tbw9S8uopsHSHLxxscSiHvsh0wMZ0V3+iv+hOTGfzdk2rN8OOyPn",
	"yMCUPc7Og5AZVd4qCHYm0wBNDIJsrPZOjNZ9EJSv68nj+zRqj95ag4HbIbcI3CGxvfdj8I3YxmD4Rmw7",
	"R0BsQd0HfZhxUIzUsFEj4HvjIBO4/w59VEq66yIZxx6DZLNAI7oqPA08vPHNLLXl9WQh5O24T4utcFLb",
	"kwk1owbMd9pCEjYti8SRYsQmZRu0BqpdeMNMoz18DGMNLJxp+k/AgjKj3gcWmgPdNxbEpmA53APpr6NM",
	"f0EVPH9Gzv5y8vLps5+fvfzakGQhxUrSDVnsNCjyldPNiNK7HB53V4baUZnr+Ohfv/BWyOa4sXGUKGUK",
	"G1p0h7LWTSsC2WbEtOtirYlmXHUF4JjDeQ6Gk1u0E2u4N6C9YcpIWJvFvWxGH8KyepaMOEgy2EtMhy6v",
	"nmYXLlHuZHkfqixIKWTEvoZHTItU5MkVSMVExFXywbUgroUXb4v27xZack0VMXOj6bfkKFBEKEtv+Xi+",
	"b4c+3/IaN4Oc3643sjo375h9aSLfWxIVKUAmestJBoty1dCEllJsCCUZdsQ7+jvQZzueolXtPoi0X03b",
	"MI4mfrXjaaCzmY3KIVs1NuHuulkbK94+Z6d6pCLgGHS8w8+o1r+BXNN7l1/aE8Rgf+030gJLMtMQteB3",
	"bLXWgYD5QQqxvH8YY7PEAMUPVjzPTZ+ukP5eZGAWW6p7uIzrwWpaN3saUjhdiFITSrjIAC0qpYpf0z1u",
	"efQHohtThze/XluJewGGkFJamtWWBUEnXYdz1B0TmlrqTRA1qseLUbmfbCs7nXX55hJoZrR64EQsnKvA",
	"OTFwkRQ9jNpfdE5IiJylBlyFFCkoBVniTBR7QfPtLBPRA3hCwBHgahaiBFlSeWdgL6/2wnkJuwT94Yp8",
	"9f1P6vFvAK8WmuZ7EIttYuitFD7nD+pCPW76IYJrTx6SHZVAPM812qVhEDlo6EPhQTjp3b82RJ1dvDta",
	"rkCiZ+afSvF+krsRUAXqP5ne7wptWfREeTlF55xt0G7HKRcKUsEzFR0sp0on+9iyadTQxswKAk4Y48Q4",
	"cI9Q8o4qbb2JjGdoBLHXCc5jBRQzRT/AvQKpGfknL4t2x07NPchVqSrBVJVFIaSGLLYGDtuBud7DtppL",
	"LIOxK+lXC1Iq2DdyH5aC8R2y7EosgqiujO7O3d5dHJqmzT2/i6KyAUSNiCFAznyrALthpEsPIEzViLaE",
	"w1SLcqrwmulEaVEUhlvopORVvz40ndnWJ/rHum2XuKiu7+1MgJlde5gc5NcWszbGaU2NCo0jkw29NLIH",
	"KsTW7dmF2RzGRDGeQjJE+eZYnplW4RHYc0h7bBEuijKYrXU4WvQbJbpeItizC30L7jGMfKBSs5QVKCl+",
	"D7t7F5zbE0TN9SQDTZlR1oMPVoguwv7E+rHbY95OkB6lw3bB7yixkeXkTOGF0QT+EnaosXywAVLnQVjV",
	"PWgCkVHN6aacIKA+7MIIMGET2NJU5ztzzek17Mg1SCCqXGyY1jbirakoaFEk4QBR++DAjM4YboOL/A6M",
	"sc6f4VDB8rpbMZ1YiWoYvvOWWNVAh5OkCiHyEbp3BxlRCEb5TUkhzK4zF2Dpo/A8JTWAdEIMekIq5vlI",
	"NdCMKyD/R5QkpRwF1lJDdSMIiWwWr18zg7nAqjmdh7TGEOSwASuH45cnT9oLf/LE7TlTZAnXPirZNGyj",
	"48kT1II/CKUbh+seLC3muJ1GeDsaTs1F4WS4Nk/Z76FzI4/ZyQ+twStrqzlTSjnCNcu/MwNoncztmLWH",
	"NDLOO4njjrKJBkPH1o37jmaef46Nph46Bl134sCpXn/s86sb+Srf3QOftgMRCYUEhacq1EuU/SqWYeC6",
	"O3ZqpzRsuqYb2/XnHsHmoxcLOlKm4DnjkGwEh100V4tx+AE/xnrbk93TGXlsX9+22NSAvwVWc54xVHhX",
	"/OJuB6T8oQoouYfNb4/bstqFIfuolUJeEErSnKHOKrjSskz1BacoFQdnOeJ487J+v5702jeJK2YRvckN",
	"dcEpOl0rWTnqLFhCRAv+FsCrS6pcrUDplnywBLjgrhXjpORM41wbs1+J3bACJHq/Zrblhu7Ikuao1v0K",
	"UpBFqZs3JkYWK220LmtCNNMQsbzgVJMcjAb6A+PnWxzOm+A9zXDQ10JeVliYRc/DCjgoppK4g/A7+xVj",
	"N9zy1y6OA9O87GdrdDLj1+HHOw2N1KX/+9V/Hn86Sf6LJr8eJa/+x/zzlxc3j590fnx28+c//7/mT89v",
	"/vz4P/8jtlMe9ljcq4P89I2TJk/foMhQW506sD+YxWHDeBIlstC30qIt8pURfDwBPa7Nem7XL7jeckNI",
	"VzRnGdW3I4c2i+ucRXs6WlTT2IiWAunX+jkWy7ISSUHTS/SvT1ZMr8vFLBWbuZei5ytRSdTzjMJGcPyW",
	"zWnB5qqAdH71dM+Vfgd+RSLsqsVkby0QdL3z8Vh1NKi68HM8ecuSW6IolTPqYiim95KK5bTKR7B5yMcE",
	"g9XX1Lv43Z/PXn49mdZB5tV3o6nbr58jZ4Jl21gqQQbbmKTmjhoesUeKFHSnQMf5EMIedQhbv1Q47AaM",
	"iK/WrHh4nqM0W8R5pQ9wcxrflp9yG3lmTiKaZ3fO6iOWDw+3lgAZFHody09syBzYqt5NgJbLrJDiCviU",
	"sBnM2hpXtgLlXdM50CXmyaGJUYwJ2K3OgSU0TxUB1sOFjFJrYvSDYrLj+zfTiRMj1L1L9m7gGFztOStb",
	"rP9bC/Lou7fnZO5Yr3pks1rs0EEeQsSS4UJtG85Uw81sVrZN67ngF/wNLBln5vvxBc+opvMFVSxV81KB",
	"/IbmlKcwWwly7KN331BNL3hHZustnBDETZOiXOQsJZehbF2Tp02G7Y5wcfHJcPyLi88dv1JXEnZTRfmL",
	"nSC5ZnotSp24bL9EwjWVWQR0VWV74cg2V3do1ilxY1tW7LIJ3fhxnkeLQrWzPrrLL4rcLD8gQ+VyGsyW",
	"EaWF9FKNEXUsNLi/74W7GCS99qmipQJFftnQ4hPj+jNJLsqjo+dAGmkQvzjhwdDkroCGzetWWSltexcu",
	"3GpIsNWSJgVdgYouXwMtcPdR8t6gdTXPCXZrpF/48DIcql6Ax0f/Blg4Dg4lx8Wd2V6+bEN8CfgJtxDb",
	"GHGjdlrcdr+ChIxbb1crqaOzS6VeJ+ZsR1elDIn7namyuVdGyPKeJMVWGK3jEt8XQNI1pJeQYQ4ubAq9",
	"mza6e2elE1k962DK5qrbcGpMqETz4AJIWWTUCfWU79qZbQq09uFCH+ESdueizsc8JJWtmVml+g4qUmog",
	"XRpiDY+tG6O9+c4jjtkkReETlDBS3ZPFcUUXvk//QbYi7z0c4hhRNDJ/+hBBZQQRlvh7UHCLhZrx7kT6",
	"seUZfWVhb75Iarvn/cQ1qdUw57wOV4MJTfb7BrDwhbhWZEGN3C5czQabPRRwsVLRFfRIyKGFdmSOTsOq",
	"i4Psu/eiN51Yti+0zn0TBdk2Tsyao5QC5oshFVRmWiELfibrBMAVzAiWYnIIW+QoJlWxHZbpUNmwlNva",
	"Mn2gxQkYJK8FDg9GEyOhZLOmypeTwKob/iyPkgH+idlwQznQp4G3PSitUWU4e57bPqcd7dJlQvv0Z5/z",
	"HKqWI/KXjYSPAX6x7RAcBaAMcljZhdvGnlDqzLx6gwwcf10uc8aBJDHHPVVKpMzWA6mvGTcHGPn4CSHW",
	"mExGjxAj4wBsdG7hwOS9CM8mXx0CJHeZhdSPjW6x4G+IB0HbUDYj8ojCsHDGe4ImPQegLtqjur9aMUc4",
	"DGF8Sgybu6K5YXNO46sH6aTiotjaSrx17tXHfeLsgC3fXiwHrcleRbdZTSgzeaDjAt0AxAuxTWwWRFTi",
	"XWwXht6j0X2YkxE7mDbp+ZEiC7FFlz1eLTaabA8s/XB4MAINf8sU0iv267vNLTBD0w5LUzEqVEgyzpxX",
	"kUufODFm6h4Jpo9cvgrymG8FQMvYUVf8c8rvXiW1KZ50L/P6VpvW9Tl84HTs+Pcdoegu9eCva4WpMo+d",
	"CeEjpEJm/XYKQ6hMVyUUu+YFVwDS8I3RuckD5RxPmtqGVyG6O9fjWW7AU88zgIg3Nuy/A8nbbSGMdGvT",
	"AmyOuEOKlRMl2GwnZW1WivFV7gSDPjTFFuzjWjzG7ZLrmi9+wHGyc2xze5T8IViKIg7HIZrKR4efASh6",
	"TnkNB8rhd4TE5YkPwnLTTx8f2qJ99KA0QzSa1QkCXSt2Oxjy6fpFu95XBTmg9pw0tI3kMuYtv7j4pABF",
	"szPfLbDyYQ0EynePg7gfCSumNNR+KyPBekw/tB2fYuklIZb9q9OFXJr1fRSikudsbQ/s2Fjmg6/gSmhI",
	"lkwqnaDTL7oE0+hbhdanb03TuFLRjCyyVQhZFr9EcdpL2CUZy8s4vbp5v39jpn1fyQ6qXKBgwjgBmq7J",
	"AqtmRuMNB6a2IamDC35nF/yO3tt6x50G09RMLA25NOf4NzkXrZtuiB1ECDBGHN1d60XpwAUaZNl1uWOg",
	"YNjDidfpbMhN0TlMmR97b6SWz/XrE+bsSANrwSCj3gDPSGgPWUlRFpap1wWzo/lwXOikYfyIoKsy8ChN",
	"L21OR3OD+aqyqcQDsKxePWpo13bPgHz8eHz/cE4ITnK4gnx/IC1FjHsDDsZY2BEwiIdgSLqPFtkv1Xd3",
	"oEZYtdI2jFFq6Ug3Q47bWjVyJaxq3RoJ1uDOJZ+O9t4ZCc3TW03fXdddUSQZ5BBN9fhbkMtBiwITtn3j",
	"WNqDGYzxDLZxcOynaaysddd4XzKubQnE+6qu1hpn/LLDGmRjUFDYalmHV3Dr1zGDXQrR3L+oHqKsnAOD",
	"jBgHrzS74EGANvX1XOO0KFi2bfk97ai91vF7wRheUG6wPRgIaCOWRCRBNWvP1cY8WwG5UfplNgoz580K",
	"caFME07FlK/f30VUlWS4D1fnQPPvYfeTaYvLmdxMJ3dzk8Zw7Ubcg+sP1fZG8YwBfdZt1oh6OBDltCik",
	"uKJ54pzJfaQpxZUjTWzufc8PLK3Fud7525N3Hxz4N9NJmgOVSaXt9K4K2xX/NquyZe56DoivD76murLP",
	"WW042PyqNlfogL5eg6vFHCjUnaKRdXBBcBSdQ3oZjyve6152cRB2iQPxEFBU4RC1q85GQzQjIOgVZbn3",
	"kXloe2KAcXHj7sYoVwgHuHMkRXgX3Su76Zzu+OmoqWsPTwrnGqgWvbEF0RURvB0uZ7RgdL0hqW4olny0",
	"HpAuc+LlBr0GicpZGven8oUyxMFtnIxpTLBxjz5tRixZT9gVL1kwlmmmRhi1W0AGc0SR6cuH9uFuIdxL",
	"NiVn/yiBsAy4Np8knsrWQUX7qfOsd6/TuFTpBrbe+Hr4u8gYYbnT9o3nZK4hASOMyumA+6ay+vmFVt4n",
	"80MQfnBAcF84Y+dKHAjMc/ThqNmmPKyb0TWjJfS9r954+5uru9ozR/QVG6aSpRS/QtxUhRa+SIahL/DK",
	"MKL1V+CziLjeZjGVJ6d+jKeevXe7+6Sb0OPUDEjsoXrc+SAEBytNem805Xar7aMSjbj2OMGEuShzO35N",
	"MA7mTv5OTq8XNFaG0wgZBqbA/dLwm2tBfGePe+ejYa7m7owEcWNVW2Zz7wuQdfJvt47PLQUGO+1oUaGW",
	"DJBqQ5lgamN9ciUiw5T8mnL7Ngl6I/Aoud5GwfcGoWshsXKGirv4M0jZJmpcurj4lKVdd27GVsy+zFEq",
	"CJ5+cAPZJ40sFbnnM2w4XY2a0yU5mgaPy7jdyNgVU2yRA7Z4alssqAJrVPGRG76LWR5wvVbY/NmI5uuS",
	"ZxIyvVYWsUqQSqhD9aYKVFmAvgbg5AjbPX1FvsIQHcWu4LHBorufJ8dPX6GD1f5xFLsA3BM8Q9wkQ3bi",
	"9f84HWOMkh3DMG436ixqDbDvpvUzroHTZLuOOUvY0vG6/WdpQzldQTwqdLMHJtsXdxN9AS288Mw++qO0",
	"FDvCdHx+0NTwp56cNcP+LBgkFZsN0xsXyKHExtBT/a6DndQPZ18QciV5PVz+I8ZDFT4cpKVEPqzfx95v",
	"sVVj1Np7uoEmWqeE2nIpOasjFX2hcHLqqzFhjeKqNLHFjZnLLB3FHAxcXJJCMq5RsSj1MvkTSddU0tSw",
	"v1kfuMni6xeRuszN+qD8MMAfHO8SFMirOOplD9l7GcL1JV9xwZON4SjZ4zpHNDiVvYFb8RCdvjih4aHH",
	"CmVmlKSX3MoGudGAU9+J8PjAgHckxWo9B9HjwSt7cMosZZw8aGl26MeP75yUsREyVmKxPu5O4pCgJYMr",
	"jNOPb5IZ8457IfNRu3AX6H9b56kXOQOxzJ/lXkXgEI9PoBugzyeMTLyNt6fp6WnIXFG3D2o44zwg9tnB",
	"fX6PuzxI0uh8CFSeQ4+DrseI0EiAbWHsMA347iaGwOXT2KE+HDWXFqPMb0Rkyb6KfeXjcRmTEbtV3wVi",
	"PhgGtXBDTUmzYvjDR9R4t0g3ssN88bDiH21gf2Nmg0j2K+jZxOA1g+h2ZtX3ILiMkm/Eduymtni339h/",
	"AdREUVKyPPuprjLSeixCUp6uo8EiC9Px5/pZu2px9jBHa2yuKec2GqFrm0At5WevzUT0rb+LsfNsGB/Z",
	"tv1+hV1ua3E14E0wPVB+QoNepnMzQYjVZtmFKq0vX4mM4Dx1Qcf6Xu++exJUp/9HCUrH7kX8YFML0KK+",
	"NFRsi8QDz9COMSPf2Wep10Aa9ebQfsA2ZW5rl9lS3dbVUxa5oNmUmHHO3568I3ZW28c+zmSLs6/stdtY",
	"RX987iGBtkOxtfeR0WdWrTSWf1SabopYsRPT4tw3wIoqoXcJFesQOzPyxto0lNeY7SSGHpZMbiAj1XRO",
	"qkaaMP/RmqZrNBY0WGo/yY9/VcBTpQpe8qxe5KoKuOK5M3C7hwXsuwJTIozkcM2UfY0YrqBZX6UqNuTE",
	"AF9vpbk8WXJuKSUqFQ8Vw7oN2j1wNgrSO6CikLUQf6D04sLUD3xk4Qx7RSsitl9s6DzhaWtsVC8t+Vfm",
	"U8oFZynWI4xdze5l4zHe2RGlG+OZAS7eRk0ihyv6TkSVrOGw2PtyhGeEDnFd91Dw1WyqpQ77p8YndNdU",
	"kxVo5TgbZFP/3ImzUDOuwBXkxUeuAz4pZMPjjRwyGkRRy8kHkhEmZ/eYHL413947gxRmLV4yjqqnz5Gw",
	"CZLWhowPr2qjrzJNVgIzKNyhCNf0yfSZYbGWDLafZ/6hVhzDOozNsm10RHeoEx8r4WITTNvXpq0tzVf/",
	"3MiDs5OeFIWbtP8xnKg8oLe8F8ERn3cV6BUgtxo/HG2A3AaDnPA+NYQGVxgiAQVxqTE9D8O0kmCM0Gop",
	"ClsQGx8drcgVDRN9xzjUzwhHLog0eiXgxuB57emnUkm1FQFH8bRzoDnGRcQYmtLOKXbXoVob7OJJi3Ti",
	"5+jfxvpNmx7GUTWoBTfKd9XrxYa6A2HiNT6b7hDZfaEGpSonRLnkmuabNTHGYRi3fxWreQF0j0FXJrLd",
	"taT25BxyE/WVKlmU2Qp0QrMsZk/4Br8S/EqyEiUH2EJaVpWgi4KkWOOvWfSwS21uolRwVW4G5vIN7jhd",
	"KmJy9HucQPnE3XrwGUH2a1jvm7cfPr59fXL+9o29LxRRpa1VYmRuCRvDEGfklCsNRnQuFZBfQjT+gv1+",
	"aS04DmbwVlWEaMP3sjwhYnz4Yof/xqo19xOQi2I6OBXAhyxlVZbfIeJ9c6SOcG6OXqLYKhmPCbz67o6O",
	"eurbnce6/70eyFysmoA8cB21IWYc7lGMDb8191tYZqxTgtzegFUVMIxaFf6FUdRuq/o1Tebpk2M7cwYv",
	"GA7bSfrfIpziHd2TfhOYpKkVA6z7vS8JJ+3NGaPalXnQlAxyyt7UeRv+ZpPkEYq466Ev5M1GvJnPnd7j",
	"BNiOOoBjDyLUx1J2AfreB2qTgjIXW1Iziy5mXVZav1Vz6NDVG9xehMv16jUsfn/Vl5fl05VtAkrr9bZL",
	"cLWfCglXTJQ+asOH9XnN1f7qXs8O0p97198N78Gpfltrba9t+dy9FGKX6UwH3/9kg0AJcC13/wKW5s6m",
	"d96+ixVpbrx852TAqFlMj70r31TP511eJRuRDeV1f/8TeeNdYKPuHU/IsapQInPvTUVz2t+51w58MyMk",
	"j572B9fppCiGp+5JZO9ObhseOn1fRSxzPoeMgx/8+bUvBoaWjohKFWRdc9jq+NtAnaTdayCwLQBL8gb5",
	"1/1FPsYSlMvFRKU6yYEqGMBwWFzOtR2J5PPtO9N+XE2A+JuN/ZVx62q4yDwLoVj9Dk3sMceRkdHn+B5j",
	"4NjsjuXDEq8g1UI2wq0kwCF1fs1kwUPBv1fI7bHnVAHknv4HquFOJyFvieZTuuNF60o+6PxDz3CkNr9t",
	"E2H2rjMzh6SEqR/C/LCkuYo/y9Ubk9sq0BLE1UTqUccXdpqNKG/uljMNQjVYNozIeMKCjVH/74lMG35/",
	"v+jsPE81rFV06kMENU7sK0KzA+JcqmBvlAxxv1bA3RvSyxhq9idvLZeQana1px7H39bAg1oPU2+wRliW",
	"QXkOViUDYd3Tw90xNUBD5TIG4QleMrgzOH2prJewe6RIgxqizxpNvXB/m5KXiAG8tYzgUQgVC6a0HjYX",
	"38ZURRmIBR+8bLtDXTy89z3JQM655VyeJJsSz8CUVyJmoh81l+l6UMEyzGvpK9nRfdGt3+LxBh/QU9Vb",
	"z75kZmi+JKfdhwWuXclNrJ5SOZV98U1Q/jdfKsnOkrNLCF+8RBc+VnpwLaI2aW/uTgbkpE6Sun+NrA30",
	"spqZ1akm3bTkSKlqDNJKc2GU4KQvK6uZ3VFFoz1SNoYVxRR8Kg/hWoJ0LwPjzZALBYkWPgJwCI4hVNhA",
	"3VshQfU+D2GB6y3a+rGuSosP7tiaHtTF54YLJBI21EAng9qx/XMOIfu1/e7zcH3psBGmd0evyd7irz7J",
	"iKkOEkOqXxJ3W+7P772NeZtxDjLxLvl26CM3qAzdxIUUWZm6ejXBwaidCWP1pgFWErUMp91Vdox8ORYt",
	"fxdUS7iE3dzaX9I15augClwIvRXt7RqCAmut3b5Xy3/cyJmv7AJW9wLnb2k9n04KIfKkxy982q2H2z4D",
	"lyy9NGJ2WYfn97wpSb5Cd2QV+HO93vn6r0UBHLLHM0JOuE2I8jFAzaedWpPzR3po/i3OmpW2RLUz7M8u",
	"eDyzBGsPyTvyNz/MMFdTYJjfHaeyg+yptrrtqcUr6XXkhdVu2N/oqJz2q5c1UVkoYlLKLSuKjTrfXeN+",
	"hPSDZx+HtZ+w4GAdbC2tjwilJe+5aQsvP9Sun3EPUPoOe8ALjTXBE5SeGzlwfuOI6B8qpARL6aWExvL3",
	"2X/cAmu+FGyRwuROs0xbJ9lG0zX3JTDuqdeVzSyO565pDasLCo6libsmOYU+Q1stNiAccy7lFc0f3qyG",
	"ZSdPEB/uHfX4QkP9N0SyRaW6XVjiOzpq7kDXvb+p+Qc0A/4NzB5Fnb1uKOf8qZ7+9C4yrMRPc5KL+glg",
	"HJJc45jWO/z0a7JwyX6FhJQp1sqDvvaPr1TqHr5FVj+vP6xf7lvnT0LfgYydgiAK8r5+yEELvB9qCOsj",
	"+hszlZ6TG6XyGPV1yCKCvxiPCqvu7LkuLhtuY/swTitsU0i4Z/dxEK92oPu4W09o7PKsi9RcOqWC7jpH",
	"39YN3EYu6nptY2MfusgdqvY/JmQh/oiH6Y4xExYh+AIOQVDJL09/IRKW+MSlIE+e4ARPnkxd01+eNT+b",
	"4/zkSVSMe7BoCYsjN4abN0oxzpnWydiBbcFkT23Cj465uwsb3XcEO0C8iGgO0UdrcGof3vrAFatR5t5r",
	"4LdLc4338bMAZX7J1UQx3P/Ul2Jh0wh6snlaZ6FkebbvUDZys+qnfjH76GeXN/ybPDb8s7Vld9mke6bx",
	"kBi59gFAxETW2pg8mCrIuhqRcOW6RdKrkLjSUjK9w3Jm3vTJfo7G1HxXeUucF7gqgOPkDi0uoSqIV/tW",
	"SuUlm+8EzVEWMPoMRihqIfIZebulmyIHx6T+/GjxR3j+pxfZ0fOnf1z86ejlUQovXr46OqKvXtCnr54/",
	"hWd/evniCJ4uv361eJY9e/Fs8eLZi69fvkqfv3i6ePH1qz8+MneAAdkCOvHFMyb/G1/kTk4+nCbnBtga",
	"J7Rg38POPtlpyNg/BkpT5IKwoSyfHPuf/qfnbrNUbOrh/a8Tl5s/WWtdqOP5/Pr6ehZ2ma/QmJpoUabr",
	"uZ+n81royYfTKovNxkLhjtoEJUMKuKmOFE7w28e3Z+fk5MPprCaYyfHkaHY0e4ollwvgtGCT48lz/AlP",
	"zxr3fe5rHR9/uZlO5mugOfrEzR8b0JKl/pO6pqsVyJl7FdX8dPVs7sW4+RdnSL4Z+jYPHxiaf2nY27M9",
	"PTHQZf7F19oabt0oZuX8DEGHkVAMNZsvMFF6bFNQQeP+paByp+ZfUD3p/X3uskfjH1FNtGdg7p1S8ZYN",
	"LH3RWwNrq0dKdboui/kX/A/S5I1lEjnEXFA26ZKSuvmUME3oQkgscqXTteELvroOU0HLCVKqJfLTzBC3",
	"6fXaQuDr6NnCwsefugGIOBDxIyEnMGReH9TGTDUvRr97UOu2umka7ev75tNR8urzl6fTp0c3fzD3ifvz",
	"5fObkb7k19W45Ky6LEY2/IyladAqjuf32dHRQS8Yd9TSepF2k6pw5EgQg92JZNNnOXFb1RqIVMjYU0Kj",
	"NXzsxeeb6eTFgSsetN01QrQjLzd/QzPi85Bx7qcPN/cpR0++4evE3ls308nLh1z9KTckT3OCLYOaaN2t",
	"/5FfcnHNfUsjZJSbDZU7f4xVgykQt9l4ldGVQkuuZFcUZTsueLOq/mf0HsRyWHr4jdL0FvzmzPT6nd88",
	"FL/BTboPftMc6J75zbMDz/y//4p/57D/bhz2zLK7O3FYJ/DZvLauBGoj++dYBm3X/XnH0yGx8EeuwBtj",
	"bMGNHU/r3I4mG8bGZzueejNqhAM9NJmeVfBizUwMXfmdXM30zx9wE0BesRTIOWwKIalk+Y78yKsyGbc+",
	"Ph9hI65AEVcPNiBOw2KNEoy2dAzkrmk4drI+o+0oJqeAdyd25/Cu1HrY5nn4bu9pGI//5n0zEJI0Cs49",
	"MYR2+NgtM+3Y1t1N1kocs1M9im3N5HcW8DsLuEcWoEvJe49ocHNhXC0UrvBiStM1xDlB94YMbtUedeZs",
	"gE24gj59XOKsySUGlZf4g/Pgn6al0vxXMfcyRUS1kRUv6tNqhmpr92gVD32gX1PuT3Jjr20IF5U5A1nt",
	"P+XdGku/n///Nuff2xGkrd6vIc9VeOq1wFNvnYouUYLb6Ky9HKBoPfgb+3n+pflEZsMqrNalzsQ1H+Ab",
	"BaSM5q7iOoZcVC4ELYgfoE6hIX91dQbyHcaZsAwIxXxOUerax2M6+8DI2qFqRiBq7UJNVozjBBjKgrPY",
	"pwVoEJyuIBU8UxGu5SB7LzLoci3kPP8oQe5q1uNgnEwbOrfb8vHMZjy9dlXkm8NUKgy5sfFiXb3Kve3Z",
	"+nt+TZlOlkK6XBbEaLezBprPXUWv1q91dYrOFyy5EfwYeAHiv86rQrXRj233Suyrcy/4RrX/NPRH4p5X",
	"nshPn83WYSl1Rw61e+14PscA8LVQej65mX5pud7Cj5+r3fKVTKtdu/l88/8DAAD//63TLoLP0AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
