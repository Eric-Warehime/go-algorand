// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P1//3wAAAP//BwGaT6ipAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
