// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/nT9/wMAAP//eaiPse/OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
