// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Get a RoundStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetRoundStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetRoundStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoundStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoundStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetRoundStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"drVr15+u/38AAAD//4PijjGq1QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
