// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
