// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"01hv6vXH6/8XAAD//8m4NOlZzAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
