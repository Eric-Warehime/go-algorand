// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pk9jvanXH6//XwAAAP//2/EWZFnMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
