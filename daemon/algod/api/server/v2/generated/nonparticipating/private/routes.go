// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
