// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
