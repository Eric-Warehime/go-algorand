// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XphJKdkan5l9+PT/AgAA///PYLFDssAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
